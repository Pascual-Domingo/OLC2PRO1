/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,7],$V2=[1,28],$V3=[1,20],$V4=[1,26],$V5=[1,27],$V6=[1,25],$V7=[1,29],$V8=[1,6],$V9=[1,19],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[2,5,10,24,28,29,30,31,41,42,50,53,81,82,83],$Vf=[2,5,10,24,27,28,29,30,31,34,36,41,42,50,53,81,82,83],$Vg=[1,42],$Vh=[1,44],$Vi=[1,43],$Vj=[1,45],$Vk=[1,46],$Vl=[1,63],$Vm=[1,60],$Vn=[1,59],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,49],$Vw=[1,73],$Vx=[14,46],$Vy=[13,46],$Vz=[13,14,35,46,56,57,58,59,60,61,69,70,71,72,73,74,75,76],$VA=[1,84],$VB=[1,85],$VC=[13,14,35,46,75,76],$VD=[13,14,35,46,69,70,71,72,73,74,75,76],$VE=[1,95],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,111],$VJ=[2,5,10,24,27,28,29,30,31,34,36,40,41,42,50,53,81,82,83],$VK=[2,5,10,11,24,27,28,29,30,31,34,36,41,42,50,53,57,62,63,64,65,66,67,77,81,82,83],$VL=[1,120],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[2,10,24,27,28,29,30,31,34,36,41,50,53,81,82,83],$VQ=[2,11,28,57,62,63,64,65,66,67,77],$VR=[2,48],$VS=[1,152],$VT=[13,14,26,46,52],$VU=[13,14,35,46,56,57,69,70,71,72,73,74,75,76],$VV=[13,14,35,46,56,57,58,59,60,69,70,71,72,73,74,75,76],$VW=[1,172],$VX=[1,173],$VY=[13,26,46],$VZ=[27,34,36];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"CUERPO":4,"EOF":5,"INSTRUCCION":6,"FUNCION":7,"SENTENCIA":8,"LSENTENCIA":9,"timprimir":10,"parA":11,"EXP_LOGICA":12,"parC":13,"ptcoma":14,"SENTENCIA_IF":15,"VARIABLES":16,"LLAMADA":17,"TRANSFERENCIA":18,"MASMAS_MENOSMENOS":19,"SWITCH":20,"INS_WHILE":21,"INS_DOWHILE":22,"INS_FOR":23,"tFor":24,"DECLARACION_FOR":25,"llaveA":26,"llaveC":27,"identificador":28,"tWhile":29,"tDo":30,"tSwitch":31,"CASOS":32,"CASO_EVALUAR":33,"tCase":34,"dospt":35,"tDefault":36,"IF":37,"ELSE":38,"ELSEIF":39,"tElse":40,"tif":41,"tFunction":42,"PARAM_FUN":43,"TIPO_DATO":44,"PARAM_LLAMADA":45,"coma":46,"PARAM":47,"TIPO_VARIABLE":48,"tVoid":49,"tLet":50,"LISTA_ID":51,"igual":52,"tConst":53,"IDENT":54,"EXP":55,"mas":56,"menos":57,"por":58,"div":59,"modular":60,"exponente":61,"entero":62,"decimal":63,"cadena1":64,"cadena2":65,"cadena3":66,"booleano":67,"EXP_RELACIONAL":68,"mayque":69,"menque":70,"mayigque":71,"menigque":72,"igig":73,"noig":74,"and":75,"or":76,"not":77,"tString":78,"tNumber":79,"tBoolean":80,"tReturn":81,"tBreak":82,"tContinue":83,"masmas":84,"menosmenos":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"timprimir",11:"parA",13:"parC",14:"ptcoma",24:"tFor",26:"llaveA",27:"llaveC",28:"identificador",29:"tWhile",30:"tDo",31:"tSwitch",34:"tCase",35:"dospt",36:"tDefault",40:"tElse",41:"tif",42:"tFunction",46:"coma",49:"tVoid",50:"tLet",52:"igual",53:"tConst",56:"mas",57:"menos",58:"por",59:"div",60:"modular",61:"exponente",62:"entero",63:"decimal",64:"cadena1",65:"cadena2",66:"cadena3",67:"booleano",69:"mayque",70:"menque",71:"mayigque",72:"menigque",73:"igig",74:"noig",75:"and",76:"or",77:"not",78:"tString",79:"tNumber",80:"tBoolean",81:"tReturn",82:"tBreak",83:"tContinue",84:"masmas",85:"menosmenos"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,2],[9,1],[8,5],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[23,10],[25,1],[25,2],[21,7],[22,9],[20,7],[32,2],[32,1],[33,4],[33,3],[15,1],[15,2],[15,2],[15,3],[39,3],[39,2],[38,4],[37,7],[7,9],[17,4],[45,3],[45,1],[45,0],[43,3],[43,1],[43,0],[47,2],[44,2],[44,2],[44,0],[16,3],[16,4],[16,5],[16,7],[51,3],[51,1],[54,1],[54,3],[54,3],[54,5],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,3],[55,1],[55,1],[55,1],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,1],[12,3],[12,3],[12,2],[12,1],[48,1],[48,1],[48,1],[48,1],[18,2],[18,1],[18,1],[18,1],[19,2],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-2], pila[pila.length-1]);
							
break;
case 3:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-1], undefined);
							
break;
case 4: case 9: case 10: case 14: case 15: case 16: case 17: case 20: case 29: case 46: case 74: case 75: case 83: case 87: case 91:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = {tipo: "INSTRUCCIONES", instruccion: [$$[$0]] } 
break;
case 6: case 25:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 34: case 40: case 43: case 54:
 this.$ = [$$[$0]]; 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 11: case 12: case 13: case 35: case 73:
 this.$ = $$[$0-1]; 
break;
case 18: case 76:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 19:
 this.$ = instruccionesAPI.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 21:
 this.$ = instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 22:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 27:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 28:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0], this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-1], $$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 33: case 39: case 42: case 53:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 36:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoFuncion($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);	
break;
case 38:
 this.$ = instruccionesAPI.nuevoLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 47:
 this.$ = TIPO_DATO.VOID; 
break;
case 49:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-2], $$[$0-1]); 
break;
case 50:
 this.$ = instruccionesAPI.nuevoVariable(undefined, [instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 51:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-4], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-3], undefined, $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 52:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-6], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 55:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-2], undefined, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column); 
break;
case 61:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULAR, this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.EXPONENTE, this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column); 
break;
case 66: case 67:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO, this._$.first_line, this._$.first_column); 
break;
case 68: case 69: case 70:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 81:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 84:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = TIPO_DATO.STRIN; 
break;
case 89:
 this.$ = TIPO_DATO.NUMERO; 
break;
case 90:
 this.$ = TIPO_DATO.BOOLENO; 
break;
case 92:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 93: case 94: case 95:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 96:
 this.$ = instruccionesAPI.nuevoMasmas($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 97:
 this.$ = instruccionesAPI.nuevoMenosmenos($$[$0-1], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,42:$V8,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},{1:[3]},{5:[1,30]},{2:$V0,4:31,5:[2,3],6:3,7:4,8:5,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,42:$V8,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($Ve,[2,4]),o($Ve,[2,5]),{28:[1,32]},{11:[1,33]},o($Vf,[2,9]),o($Vf,[2,10]),{14:[1,34]},{14:[1,35]},{14:[1,36]},o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,29],{38:37,39:38,40:[1,39]}),{28:$Vg,51:40,54:41},{11:$Vh,52:$Vi,84:$Vj,85:$Vk},{28:[1,47]},{2:$Vl,11:$Vm,12:48,14:[2,93],17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{14:[2,94]},{14:[2,95]},{11:[1,64]},{11:[1,65]},{26:[1,66]},{11:[1,67]},{11:[1,68]},{1:[2,1]},{5:[2,2]},{11:[1,69]},{2:$Vl,11:$Vm,12:70,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,30]),o($Vf,[2,31],{38:71,40:[1,72]}),{26:$Vw,37:74,41:$V7},{14:[1,75],46:[1,76]},o($Vx,[2,54]),o($Vx,[2,55],{35:[1,77],52:[1,78]}),{2:$Vl,11:$Vm,12:79,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($Vy,[2,41],{68:50,55:51,17:61,19:62,45:80,12:81,2:$Vl,11:$Vm,28:$Vn,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,77:$Vv}),o($Vz,[2,96]),o($Vz,[2,97]),{35:[1,83],52:[1,82]},{14:[2,92],75:$VA,76:$VB},{2:$Vl,11:$Vm,12:86,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($VC,[2,87],{69:[1,87],70:[1,88],71:[1,89],72:[1,90],73:[1,91],74:[1,92]}),o($VD,[2,83],{56:[1,93],57:[1,94],58:$VE,59:$VF,60:$VG,61:$VH}),{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:99,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($Vz,[2,66]),o($Vz,[2,67]),o($Vz,[2,68]),o($Vz,[2,69]),o($Vz,[2,70]),o($Vz,[2,71]),o($Vz,[2,72],{11:$Vh,84:$Vj,85:$Vk}),{2:$Vl,11:$Vm,12:100,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($Vz,[2,74]),o($Vz,[2,75]),o($Vz,[2,76]),{2:$Vl,11:$Vm,12:101,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{2:$Vl,11:$Vm,12:102,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{2:$V0,8:104,9:103,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},{16:106,25:105,28:[1,107],50:$V9,53:$Va},{2:$Vl,11:$Vm,12:108,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($Vy,[2,44],{43:109,47:110,28:$VI}),{13:[1,112],75:$VA,76:$VB},o($Vf,[2,32]),{26:$Vw,37:113,41:$V7},{2:$V0,8:104,9:114,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($VJ,[2,34]),o($VK,[2,49]),{28:$Vg,54:115},{28:$VL,48:116,78:$VM,79:$VN,80:$VO},{2:$Vl,11:$Vm,12:121,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{14:[1,122],75:$VA,76:$VB},{13:[1,123],46:[1,124]},o($Vy,[2,40],{75:$VA,76:$VB}),{2:$Vl,11:$Vm,12:125,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{28:$VL,48:126,78:$VM,79:$VN,80:$VO},{2:$Vl,11:$Vm,12:127,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{2:$Vl,11:$Vm,12:128,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($VC,[2,86]),{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:129},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:130},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:131},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:132},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:133},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:134},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:135,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:136,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:137,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:138,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:139,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:$Vl,11:$Vm,17:61,19:62,28:$Vn,55:140,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($Vz,[2,65]),{13:[1,141],75:$VA,76:$VB},{13:[1,142],75:$VA,76:$VB},{13:[1,143],75:$VA,76:$VB},{2:$V0,8:145,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,27:[1,144],28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($VP,[2,7]),{2:$Vl,11:$Vm,12:146,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($VQ,[2,20]),{14:[1,147],52:$Vi},{13:[1,148],75:$VA,76:$VB},{13:[1,149],46:[1,150]},o($Vy,[2,43]),o($Vy,$VR,{44:151,35:$VS}),{14:[1,153]},o($VJ,[2,33]),{2:$V0,8:145,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,27:[1,154],28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($Vx,[2,53]),o($Vx,[2,56],{52:[1,155]}),o($VT,[2,88]),o($VT,[2,89]),o($VT,[2,90]),o($VT,[2,91]),o($Vx,[2,57],{75:$VA,76:$VB}),o($VK,[2,50]),o($Vz,[2,38]),{2:$Vl,11:$Vm,12:156,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{14:[1,157],75:$VA,76:$VB},{52:[1,158]},o($VC,[2,84]),o([13,14,35,46,76],[2,85],{75:$VA}),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),o($VU,[2,59],{58:$VE,59:$VF,60:$VG,61:$VH}),o($VU,[2,60],{58:$VE,59:$VF,60:$VG,61:$VH}),o($VV,[2,61],{61:$VH}),o($VV,[2,62],{61:$VH}),o($VV,[2,63],{61:$VH}),o($Vz,[2,64]),o($Vz,[2,73]),{26:[1,159]},{26:[1,160]},{29:[1,161]},o($VP,[2,6]),{14:[1,162],75:$VA,76:$VB},o($VQ,[2,21]),{26:[1,163]},{26:$VR,35:$VS,44:164},{28:$VI,47:165},o($Vy,[2,45]),{28:$VL,48:166,49:[1,167],78:$VM,79:$VN,80:$VO},o($Vf,[2,8]),o($Vf,[2,35]),{2:$Vl,11:$Vm,12:168,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},o($Vy,[2,39],{75:$VA,76:$VB}),o($VK,[2,51]),{2:$Vl,11:$Vm,12:169,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{32:170,33:171,34:$VW,36:$VX},{2:$V0,8:104,9:174,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},{11:[1,175]},{19:176,28:[1,177]},{2:$V0,8:104,9:178,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},{26:[1,179]},o($Vy,[2,42]),o($VY,[2,46]),o($VY,[2,47]),o($Vx,[2,58],{75:$VA,76:$VB}),{14:[1,180],75:$VA,76:$VB},{27:[1,181],33:182,34:$VW,36:$VX},o($VZ,[2,26]),{2:$Vl,11:$Vm,12:183,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{35:[1,184]},{2:$V0,8:145,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,27:[1,185],28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},{2:$Vl,11:$Vm,12:186,17:61,19:62,28:$Vn,55:51,57:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:50,77:$Vv},{13:[1,187]},{84:$Vj,85:$Vk},{2:$V0,8:145,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,27:[1,188],28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},{2:$V0,8:104,9:189,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($VK,[2,52]),o($Vf,[2,24]),o($VZ,[2,25]),{35:[1,190],75:$VA,76:$VB},{2:$V0,8:104,9:191,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($Vf,[2,22]),{13:[1,192],75:$VA,76:$VB},{26:[1,193]},o($VJ,[2,36]),{2:$V0,8:145,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,27:[1,194],28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},{2:$V0,8:104,9:195,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($VZ,[2,28],{15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,37:18,8:145,2:$V0,10:$V1,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd}),{14:[1,196]},{2:$V0,8:104,9:197,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($Ve,[2,37]),o($VZ,[2,27],{15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,37:18,8:145,2:$V0,10:$V1,24:$V2,28:$V3,29:$V4,30:$V5,31:$V6,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd}),o($Vf,[2,23]),{2:$V0,8:145,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:$V2,27:[1,198],28:$V3,29:$V4,30:$V5,31:$V6,37:18,41:$V7,50:$V9,53:$Va,81:$Vb,82:$Vc,83:$Vd},o($Vf,[2,19])],
defaultActions: {23:[2,94],24:[2,95],30:[2,1],31:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 77; 
break;
case 1: return 56; 
break;
case 2: return 57; 
break;
case 3: return 58; 
break;
case 4: return 59; 
break;
case 5: return 11; 
break;
case 6: return 13; 
break;
case 7: return 26; 
break;
case 8: return 27; 
break;
case 9: return 14; 
break;
case 10: return 69; 
break;
case 11: return 70; 
break;
case 12: return 71; 
break;
case 13: return 72; 
break;
case 14: return 52; 
break;
case 15: return 73; 
break;
case 16: return 74; 
break;
case 17: return 60; 
break;
case 18: return 61; 
break;
case 19: return 35; 
break;
case 20: return 46; 
break;
case 21: return 75; 
break;
case 22: return 76; 
break;
case 23: return 84; 
break;
case 24: return 85; 
break;
case 25: return 30; 
break;
case 26: return 78; 
break;
case 27: return 79; 
break;
case 28: return 80; 
break;
case 29: return 41; 
break;
case 30: return 40; 
break;
case 31: return 10; 
break;
case 32: return 50; 
break;
case 33: return 53; 
break;
case 34: return 42; 
break;
case 35: return 49; 
break;
case 36: return 81; 
break;
case 37: return 83; 
break;
case 38: return 82; 
break;
case 39: return 31; 
break;
case 40: return 34; 
break;
case 41: return 29; 
break;
case 42: return 24; 
break;
case 43: return 67; 
break;
case 44: return 63; 
break;
case 45: return 62; 
break;
case 46: return 28; 
break;
case 47: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 50:/* skip whitespace */
break;
case 51:// comentario simple l√≠nea
break;
case 52:// comentario multiple l√≠neas
break;
case 53: 
break;
case 54: 
break;
case 55:return 5 //fin de cadena
break;
case 56:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(!))/i,/^(?:(\+))/i,/^(?:(-))/i,/^(?:(\*))/i,/^(?:(\/))/i,/^(?:(\())/i,/^(?:(\)))/i,/^(?:(\{))/i,/^(?:(\}))/i,/^(?:(;))/i,/^(?:(>))/i,/^(?:(<))/i,/^(?:(>=))/i,/^(?:(<=))/i,/^(?:(=))/i,/^(?:(==))/i,/^(?:(!=))/i,/^(?:(%))/i,/^(?:(\*\*))/i,/^(?:(:))/i,/^(?:(,))/i,/^(?:(&&))/i,/^(?:(\|\|))/i,/^(?:(\+\+))/i,/^(?:(--))/i,/^(?:(do))/i,/^(?:(string))/i,/^(?:(number))/i,/^(?:(boolean))/i,/^(?:(if))/i,/^(?:(else))/i,/^(?:(console\.log))/i,/^(?:(let))/i,/^(?:(const))/i,/^(?:(function))/i,/^(?:(void))/i,/^(?:(return))/i,/^(?:(continue))/i,/^(?:(break))/i,/^(?:(switch))/i,/^(?:(case))/i,/^(?:(while))/i,/^(?:(for))/i,/^(?:(true|false))/i,/^(?:([0-9]+(\.[0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/i,/^(?:("[^\"]*"))/i,/^(?:('[^\']*'))/i,/^(?:(`[^\`]*`))/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\\t)/i,/^(?:\\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}