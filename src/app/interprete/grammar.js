/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,7],$V2=[1,22],$V3=[1,36],$V4=[1,35],$V5=[1,26],$V6=[1,28],$V7=[1,33],$V8=[1,34],$V9=[1,32],$Va=[1,37],$Vb=[1,6],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,38],$Vg=[2,5,10,30,33,38,39,41,47,48,49,59,60,68,103,104,110],$Vh=[2,5,10,30,33,37,38,39,41,47,48,49,52,54,59,60,68,103,104,110],$Vi=[1,57],$Vj=[1,61],$Vk=[1,58],$Vl=[1,59],$Vm=[1,84],$Vn=[1,76],$Vo=[1,83],$Vp=[1,85],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,65],$Vy=[11,13,14,15,32,35,37,40,42,43,53,69,73,75,77,78,79,80,81,82,91,92,93,94,95,96,97,98,105,106],$Vz=[1,93],$VA=[1,99],$VB=[14,15],$VC=[2,77],$VD=[13,15],$VE=[13,14,15,37,53,69,75,77,78,79,80,81,82,91,92,93,94,95,96,97,98],$VF=[1,109],$VG=[1,111],$VH=[1,117],$VI=[1,115],$VJ=[1,116],$VK=[13,14,15,37,53,69,75,97,98],$VL=[13,14,15,37,53,69,75,91,92,93,94,95,96,97,98],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[1,129],$VQ=[1,130],$VR=[1,131],$VS=[15,75],$VT=[2,5,10,30,33,37,38,39,41,47,48,49,52,54,58,59,60,68,103,104,110],$VU=[2,5,10,11,30,33,35,37,38,39,41,47,48,49,52,54,59,60,68,73,78,83,84,85,86,87,88,99,103,104,110],$VV=[1,165],$VW=[1,166],$VX=[1,167],$VY=[1,169],$VZ=[1,197],$V_=[15,37],$V$=[2,10,30,33,37,38,39,41,47,48,49,52,54,59,68,103,104,110],$V01=[2,11,35,73,78,83,84,85,86,87,88,99,110],$V11=[2,63],$V21=[1,215],$V31=[1,220],$V41=[1,219],$V51=[2,79],$V61=[2,78],$V71=[1,223],$V81=[13,14,15,32,35,73],$V91=[1,227],$Va1=[13,14,15,37,53,69,75,77,78,91,92,93,94,95,96,97,98],$Vb1=[13,14,15,37,53,69,75,77,78,79,80,81,91,92,93,94,95,96,97,98],$Vc1=[1,267],$Vd1=[1,268],$Ve1=[13,15,35],$Vf1=[2,80],$Vg1=[1,286],$Vh1=[37,52,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"CUERPO":4,"EOF":5,"INSTRUCCION":6,"FUNCION":7,"SENTENCIA":8,"LSENTENCIA":9,"timprimir":10,"parA":11,"EXP_LOGICA":12,"parC":13,"ptcoma":14,"coma":15,"SENTENCIA_IF":16,"VARIABLES":17,"LLAMADA":18,"TRANSFERENCIA":19,"MASMAS_MENOSMENOS":20,"SWITCH":21,"INS_WHILE":22,"INS_DOWHILE":23,"INS_FOR":24,"FOROF":25,"OPERADOR_TERNARIO":26,"MIPOP":27,"MIPUSH":28,"MITYPE":29,"tGraficar_ts":30,"ACCESOARRAY":31,"igual":32,"tType":33,"PR_IDENTIFICADOR":34,"llaveA":35,"LSTRUCT":36,"llaveC":37,"tFor":38,"tLet":39,"tOf":40,"tConst":41,"tIn":42,"punto":43,"tPush":44,"tPop":45,"DECLARACION_FOR":46,"tWhile":47,"tDo":48,"tSwitch":49,"CASOS":50,"CASO_EVALUAR":51,"tCase":52,"dospt":53,"tDefault":54,"IF":55,"ELSE":56,"ELSEIF":57,"tElse":58,"tif":59,"tFunction":60,"PARAM_FUN":61,"TIPO_DATO":62,"PARAM_LLAMADA":63,"PARAM":64,"TIPO_VARIABLE":65,"tVoid":66,"TERNARIO":67,"tReturn":68,"interrogacionC":69,"LISTA_ID":70,"IDENT":71,"ASIGARRAY":72,"corchA":73,"LISEXP":74,"corchC":75,"EXP":76,"mas":77,"menos":78,"por":79,"div":80,"modular":81,"exponente":82,"entero":83,"decimal":84,"cadena1":85,"cadena2":86,"cadena3":87,"booleano":88,"LENGTHARRAY":89,"EXP_RELACIONAL":90,"mayque":91,"menque":92,"mayigque":93,"menigque":94,"igig":95,"noig":96,"and":97,"or":98,"not":99,"tString":100,"tNumber":101,"tBoolean":102,"tBreak":103,"tContinue":104,"masmas":105,"menosmenos":106,"tLength":107,"STRUCT":108,"TIPO_STRUCT":109,"identificador":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"timprimir",11:"parA",13:"parC",14:"ptcoma",15:"coma",30:"tGraficar_ts",32:"igual",33:"tType",35:"llaveA",37:"llaveC",38:"tFor",39:"tLet",40:"tOf",41:"tConst",42:"tIn",43:"punto",44:"tPush",45:"tPop",47:"tWhile",48:"tDo",49:"tSwitch",52:"tCase",53:"dospt",54:"tDefault",58:"tElse",59:"tif",60:"tFunction",66:"tVoid",68:"tReturn",69:"interrogacionC",73:"corchA",75:"corchC",77:"mas",78:"menos",79:"por",80:"div",81:"modular",82:"exponente",83:"entero",84:"decimal",85:"cadena1",86:"cadena2",87:"cadena3",88:"booleano",91:"mayque",92:"menque",93:"mayigque",94:"menigque",95:"igig",96:"noig",97:"and",98:"or",99:"not",100:"tString",101:"tNumber",102:"tBoolean",103:"tBreak",104:"tContinue",105:"masmas",106:"menosmenos",107:"tLength",110:"identificador"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,2],[9,1],[8,5],[8,7],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,1],[8,2],[8,4],[8,4],[8,1],[29,6],[25,10],[25,10],[25,10],[25,10],[28,7],[27,5],[24,10],[46,1],[46,2],[22,7],[23,9],[21,7],[50,2],[50,1],[51,4],[51,3],[16,1],[16,2],[16,2],[16,3],[57,3],[57,2],[56,4],[55,7],[7,9],[18,4],[63,3],[63,1],[63,0],[61,3],[61,1],[61,0],[64,2],[62,2],[62,2],[62,0],[26,5],[26,7],[26,5],[26,7],[26,4],[26,3],[67,5],[17,3],[17,4],[17,5],[17,7],[70,3],[70,1],[71,1],[71,3],[71,3],[71,5],[72,3],[74,3],[74,1],[74,0],[31,4],[76,3],[76,3],[76,3],[76,3],[76,3],[76,3],[76,2],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,3],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,3],[76,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,1],[12,3],[12,3],[12,2],[12,1],[65,1],[65,1],[65,1],[65,3],[65,1],[19,2],[19,1],[19,1],[19,1],[20,2],[20,2],[89,3],[36,3],[36,1],[108,3],[109,1],[109,1],[109,1],[109,1],[34,3],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-2], pila[pila.length-1]);
							
break;
case 3:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-1], undefined);
							
break;
case 4: case 10: case 11: case 15: case 16: case 17: case 18: case 19: case 20: case 22: case 35: case 44: case 61: case 101: case 102: case 103: case 105: case 106: case 115: case 119:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = {tipo: "INSTRUCCIONES", instruccion: [$$[$0]] } 
break;
case 6: case 40:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 49: case 55: case 58: case 76: case 83: case 133: case 140:
 this.$ = [$$[$0]]; 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 9:
 this.$ = instruccionesAPI.nuevoImprimirArray($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 12: case 13: case 14: case 21: case 23: case 50: case 81: case 100:
 this.$ = $$[$0-1]; 
break;
case 24:
 this.$ = instruccionesAPI.nuevoGraficarTS(); 
break;
case 25:
 this.$ = instruccionesAPI.nuevoValorArray($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 26:
   console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
					new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column);
				
break;
case 27:
 this.$ = instruccionesAPI.nuevoType($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 28: case 29:
 this.$ = instruccionesAPI.nuevoForOf($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 30: case 31:
 this.$ = instruccionesAPI.nuevoForIN($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = instruccionesAPI.nuevoPush($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 33:
 this.$ = instruccionesAPI.nuevoPop($$[$0-4], this._$.first_line, this._$.first_column); 
break;
case 34:
 this.$ = instruccionesAPI.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$ = instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 38:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 42:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0], this._$.first_line, this._$.first_column); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 46:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-1], $$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 47:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 48: case 54: case 57: case 75: case 82: case 132: case 139:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 51:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 52:
 this.$ = instruccionesAPI.nuevoFuncion($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);	
break;
case 53:
 this.$ = instruccionesAPI.nuevoLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 62:
 this.$ = TIPO_DATO.VOID; 
break;
case 64: case 66: case 73:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-4], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-3], undefined, $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 65: case 67: case 74:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-6], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 68: case 72:
 this.$ = instruccionesAPI.nuevoVariable(undefined, [instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-2], $$[$0-1]); 
break;
case 77:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-2], undefined, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoAcceso($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column); 
break;
case 87:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 89:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 90:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULAR, this._$.first_line, this._$.first_column); 
break;
case 91:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.EXPONENTE, this._$.first_line, this._$.first_column); 
break;
case 92:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column); 
break;
case 93: case 94:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO, this._$.first_line, this._$.first_column); 
break;
case 95: case 96: case 97:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column); 
break;
case 98:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 99:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 104:
 this.$ = instruccionesAPI.nuevoAsigVec($$[$0]); 
break;
case 107:
 this.$ = instruccionesAPI.nuevoAsignaciontype($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 108:
 new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column); 
break;
case 109:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 110:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 111:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 112:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 113:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 114:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 116:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column); 
break;
case 117:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column); 
break;
case 118:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column); 
break;
case 120:
 this.$ = TIPO_DATO.STRING; 
break;
case 121:
 this.$ = TIPO_DATO.NUMERO; 
break;
case 122:
 this.$ = TIPO_DATO.BOOLEANO; 
break;
case 123:
 this.$= $$[$0-2]; 
break;
case 124:
 this.$ = $$[$0][0]; 
break;
case 125:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 126: case 127: case 128:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 129:
 this.$ = instruccionesAPI.nuevoMasmas($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 130:
 this.$ = instruccionesAPI.nuevoMenosmenos($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 131:
 this.$ = instruccionesAPI.nuevoLength($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 134:
 this.$ = instruccionesAPI.nuevoStruct($$[$0-2], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 135:
 this.$ = { tipo: TIPO_DATO.STRING, valor: TIPO_DATO.STRING }; 
break;
case 136:
 this.$ = { tipo: TIPO_DATO.NUMERO, valor: TIPO_DATO.NUMERO }; 
break;
case 137:
 this.$ = { tipo: TIPO_DATO.BOOLEANO, valor: TIPO_DATO.BOOLEANO }; 
break;
case 138:
  	if($$[$0].tipo == "VAL_IDENTIFICADOR"){
							$$[$0].valor = $$[$0].valor[0];
							this.$ = $$[$0];
						}
					
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,60:$Vb,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{1:[3]},{5:[1,39]},{2:$V0,4:40,5:[2,3],6:3,7:4,8:5,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,60:$Vb,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($Vg,[2,4]),o($Vg,[2,5]),{34:41,110:$Vf},{11:[1,42]},o($Vh,[2,10]),o($Vh,[2,11]),{14:[1,43]},{14:[1,44]},{14:[1,45]},o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{14:[1,46]},o($Vh,[2,22]),{14:[1,47]},{11:[1,48]},{32:[1,49]},o($Vh,[2,26]),o($Vh,[2,44],{56:50,57:51,58:[1,52]}),{34:54,70:53,71:55,110:$Vf},{11:$Vi,32:[1,56],43:[1,60],73:$Vj,105:$Vk,106:$Vl},{34:62,110:$Vf},{2:$Vm,11:$Vn,12:63,14:[2,126],18:77,20:79,27:82,31:81,34:75,35:$Vo,67:64,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{14:[2,127]},{14:[2,128]},{11:[1,86]},{11:[1,87]},{35:[1,88]},{11:[1,89]},{34:90,110:$Vf},{11:[1,91]},o($Vy,[2,140]),{1:[2,1]},{5:[2,2]},{11:[1,92],43:$Vz},{2:$Vm,11:$Vn,12:94,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,21]),o($Vh,[2,23]),{13:[1,95]},{2:$Vm,11:$Vn,12:96,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($Vh,[2,45]),o($Vh,[2,46],{56:97,58:[1,98]}),{35:$VA,55:100,59:$Va},{14:[1,101],15:[1,102]},o($VB,$VC,{32:[1,103],43:$Vz,53:[1,104]}),o($VB,[2,76]),{2:$Vm,11:$Vn,12:105,18:77,20:79,27:82,31:81,34:75,35:$Vo,67:106,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($VD,[2,56],{90:66,76:67,34:75,18:77,89:78,20:79,72:80,31:81,27:82,63:107,12:108,2:$Vm,11:$Vn,35:$Vo,73:$Vp,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,99:$Vx,110:$Vf}),o($VE,[2,129]),o($VE,[2,130]),{44:[1,110],45:$VF,110:$VG},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:112,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},{32:[1,113],43:$Vz,53:[1,114]},{14:[2,125],69:$VH,97:$VI,98:$VJ},{14:[1,118]},{2:$Vm,11:$Vn,12:119,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($VK,[2,119],{91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125]}),o($VL,[2,115],{77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR}),{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:132,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},o($VE,[2,93]),o($VE,[2,94]),o($VE,[2,95]),o($VE,[2,96]),o($VE,[2,97]),o($VE,[2,98]),o($VE,[2,99],{11:$Vi,43:[1,133],73:$Vj,105:$Vk,106:$Vl}),{2:$Vm,11:$Vn,12:134,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($VE,[2,101]),o($VE,[2,102]),o($VE,[2,103]),o($VE,[2,104]),o($VE,[2,105]),o($VE,[2,106]),{34:137,36:135,108:136,110:$Vf},o($VE,[2,108]),o($VS,[2,84],{90:66,76:67,34:75,18:77,89:78,20:79,72:80,31:81,27:82,74:138,12:139,2:$Vm,11:$Vn,35:$Vo,73:$Vp,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,99:$Vx,110:$Vf}),{2:$Vm,11:$Vn,12:140,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{2:$Vm,11:$Vn,12:141,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{2:$V0,8:143,9:142,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{17:147,34:148,39:[1,145],41:[1,146],46:144,110:$Vf},{32:[1,149],43:$Vz},{2:$Vm,11:$Vn,12:150,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($VD,[2,59],{61:151,64:152,34:153,110:$Vf}),{110:$VG},{13:[1,154],15:[1,155],97:$VI,98:$VJ},{14:[1,156]},{14:[1,157],97:$VI,98:$VJ},o($Vh,[2,47]),{35:$VA,55:158,59:$Va},{2:$V0,8:143,9:159,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($VT,[2,49]),o($VU,[2,71]),{34:161,71:160,110:$Vf},{2:$Vm,11:$Vn,12:163,18:77,20:79,27:82,31:81,34:75,35:$Vo,67:162,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{34:168,65:164,100:$VV,101:$VW,102:$VX,110:$Vf},{14:$VY,69:$VH,97:$VI,98:$VJ},{14:[1,170]},{13:[1,171],15:[1,172]},o($VD,[2,55],{97:$VI,98:$VJ}),{11:[1,173]},{11:[1,174]},o($Vy,[2,139]),{75:[1,175],77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR},{2:$Vm,11:$Vn,12:176,18:77,20:79,27:82,31:81,34:75,35:$Vo,67:177,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{34:168,65:178,100:$VV,101:$VW,102:$VX,110:$Vf},{2:$Vm,11:$Vn,12:179,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{2:$Vm,11:$Vn,12:180,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{2:$Vm,11:$Vn,12:181,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($Vh,[2,69]),o($VK,[2,118]),{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:182,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:183,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:184,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:185,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:186,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:187,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:188,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:189,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:190,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:191,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:192,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},{2:$Vm,11:$Vn,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:193,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,110:$Vf},o($VE,[2,92]),{45:$VF,107:[1,194],110:$VG},{13:[1,195],97:$VI,98:$VJ},{15:$VZ,37:[1,196]},o($V_,[2,133]),{43:$Vz,53:[1,198]},{15:[1,200],75:[1,199]},o($VS,[2,83],{97:$VI,98:$VJ}),{13:[1,201],97:$VI,98:$VJ},{13:[1,202],97:$VI,98:$VJ},{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,203],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($V$,[2,7]),{2:$Vm,11:$Vn,12:205,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{34:206,70:53,71:55,110:$Vf},{34:207,110:$Vf},o($V01,[2,35]),{14:[1,208],32:[1,209],43:$Vz},{35:[1,210]},{13:[1,211],97:$VI,98:$VJ},{13:[1,212],15:[1,213]},o($VD,[2,58]),o($VD,$V11,{62:214,43:$Vz,53:$V21}),{14:[1,216]},{2:$Vm,11:$Vn,12:217,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($Vh,[2,24]),o($Vh,[2,25]),o($VT,[2,48]),{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,218],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($VB,[2,75]),o($VB,$VC,{32:$V31,43:$Vz,53:$V41}),{14:[1,221]},o($VB,$V51,{69:$VH,97:$VI,98:$VJ}),o($VB,$V61,{32:[1,222],73:$V71}),o($V81,[2,120]),o($V81,[2,121]),o($V81,[2,122]),o($V81,[2,124],{43:$Vz}),o($VU,[2,72]),o($Vh,[2,68]),o($VE,[2,53]),{2:$Vm,11:$Vn,12:224,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{13:[1,225]},{2:$Vm,11:$Vn,12:226,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o([13,14,15,32,37,53,69,75,77,78,79,80,81,82,91,92,93,94,95,96,97,98],[2,85]),{14:$V91,69:$VH,97:$VI,98:$VJ},{14:[1,228]},{32:[1,229],73:$V71},o($VK,[2,116]),o([13,14,15,37,53,69,75,98],[2,117],{97:$VI}),{53:[1,230],97:$VI,98:$VJ},o($VL,[2,109]),o($VL,[2,110]),o($VL,[2,111]),o($VL,[2,112]),o($VL,[2,113]),o($VL,[2,114]),o($Va1,[2,86],{79:$VO,80:$VP,81:$VQ,82:$VR}),o($Va1,[2,87],{79:$VO,80:$VP,81:$VQ,82:$VR}),o($Vb1,[2,88],{82:$VR}),o($Vb1,[2,89],{82:$VR}),o($Vb1,[2,90],{82:$VR}),o($VE,[2,91]),o($VE,[2,131]),o($VE,[2,100]),o($VE,[2,107]),{34:137,108:231,110:$Vf},{2:$Vm,11:$Vn,12:236,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,100:[1,233],101:[1,234],102:[1,235],109:232,110:$Vf},o($VE,[2,81]),{2:$Vm,11:$Vn,12:237,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{35:[1,238]},{35:[1,239]},{47:[1,240]},o($V$,[2,6]),{14:[1,241],97:$VI,98:$VJ},o($VB,$VC,{32:$V31,40:[1,242],42:[1,243],43:$Vz,53:$V41}),{32:[1,246],40:[1,244],42:[1,245],43:$Vz,53:[1,247]},o($V01,[2,36]),{2:$Vm,11:$Vn,12:248,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{34:137,36:249,108:136,110:$Vf},{35:[1,250]},{35:$V11,53:$V21,62:251},{34:153,64:252,110:$Vf},o($VD,[2,60]),{34:168,65:253,66:[1,254],100:$VV,101:$VW,102:$VX,110:$Vf},o($Vh,[2,8]),{13:[1,255],97:$VI,98:$VJ},o($Vh,[2,50]),{34:168,65:256,100:$VV,101:$VW,102:$VX,110:$Vf},{2:$Vm,11:$Vn,12:257,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($Vh,[2,64]),{2:$Vm,11:$Vn,12:259,18:77,20:79,27:82,31:81,34:75,35:$Vo,67:258,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{75:[1,260]},o($VD,[2,54],{97:$VI,98:$VJ}),o($VE,[2,33]),{13:[1,261],97:$VI,98:$VJ},o($VU,[2,73]),o($Vh,[2,66]),{2:$Vm,11:$Vn,12:262,18:77,20:79,27:82,31:81,34:75,35:$Vo,67:263,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{2:$Vm,11:$Vn,12:264,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($V_,[2,132]),o($V_,[2,134]),o($V_,[2,135]),o($V_,[2,136]),o($V_,[2,137]),o($V_,[2,138],{97:$VI,98:$VJ}),o($VS,[2,82],{97:$VI,98:$VJ}),{50:265,51:266,52:$Vc1,54:$Vd1},{2:$V0,8:143,9:269,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{11:[1,270]},{20:271,34:272,110:$Vf},{34:273,110:$Vf},{34:274,110:$Vf},{34:275,110:$Vf},{34:276,110:$Vf},{2:$Vm,11:$Vn,12:277,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{34:168,65:278,100:$VV,101:$VW,102:$VX,110:$Vf},{14:$VY,97:$VI,98:$VJ},{15:$VZ,37:[1,279]},{2:$V0,8:143,9:280,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{35:[1,281]},o($VD,[2,57]),o($Ve1,[2,61],{73:$V71}),o($Ve1,[2,62]),{14:[1,282]},o($VB,$V61,{32:[1,283],73:$V71}),o($VB,$V51,{97:$VI,98:$VJ}),{14:[1,284]},o($VB,$Vf1,{69:$VH,97:$VI,98:$VJ}),o($V81,[2,123]),{14:[1,285]},{14:$Vg1,69:$VH,97:$VI,98:$VJ},{14:[1,287]},{14:[2,70],97:$VI,98:$VJ},{37:[1,288],51:289,52:$Vc1,54:$Vd1},o($Vh1,[2,41]),{2:$Vm,11:$Vn,12:290,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{53:[1,291]},{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,292],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$Vm,11:$Vn,12:293,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},{13:[1,294]},{43:$Vz,105:$Vk,106:$Vl},{13:[1,295],43:$Vz},{13:[1,296],43:$Vz},{13:[1,297],43:$Vz},{13:[1,298],43:$Vz},{14:$V91,97:$VI,98:$VJ},{32:[1,299],73:$V71},{14:[2,27]},{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,300],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:143,9:301,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($Vh,[2,9]),{2:$Vm,11:$Vn,12:302,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($Vh,[2,65]),o($Vh,[2,32]),o($VU,[2,74]),o($Vh,[2,67]),o($Vh,[2,39]),o($Vh1,[2,40]),{53:[1,303],97:$VI,98:$VJ},{2:$V0,8:143,9:304,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($Vh,[2,37]),{13:[1,305],97:$VI,98:$VJ},{35:[1,306]},{35:[1,307]},{35:[1,308]},{35:[1,309]},{35:[1,310]},{2:$Vm,11:$Vn,12:311,18:77,20:79,27:82,31:81,34:75,35:$Vo,72:80,73:$Vp,76:67,78:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:78,90:66,99:$Vx,110:$Vf},o($VT,[2,51]),{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,312],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($VB,$Vf1,{97:$VI,98:$VJ}),{2:$V0,8:143,9:313,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($Vh1,[2,43],{16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,31:23,55:25,34:27,8:204,2:$V0,10:$V1,30:$V2,33:$V3,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf}),{14:[1,314]},{2:$V0,8:143,9:315,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:143,9:316,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:143,9:317,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:143,9:318,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:143,9:319,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{14:$Vg1,97:$VI,98:$VJ},o($Vg,[2,52]),o($Vh1,[2,42],{16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,31:23,55:25,34:27,8:204,2:$V0,10:$V1,30:$V2,33:$V3,38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf}),o($Vh,[2,38]),{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,320],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,321],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,322],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,323],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},{2:$V0,8:204,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:21,30:$V2,31:23,33:$V3,34:27,37:[1,324],38:$V4,39:$V5,41:$V6,47:$V7,48:$V8,49:$V9,55:25,59:$Va,68:$Vc,103:$Vd,104:$Ve,110:$Vf},o($Vh,[2,34]),o($Vh,[2,28]),o($Vh,[2,30]),o($Vh,[2,29]),o($Vh,[2,31])],
defaultActions: {30:[2,127],31:[2,128],39:[2,1],40:[2,2],279:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import { TE } from './tabla_errores';
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const { SINTACTOCO, ERLEXICO } = require('./tabla_errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 99; 
break;
case 1: return 77; 
break;
case 2: return 78; 
break;
case 3: return 79; 
break;
case 4: return 80; 
break;
case 5: return 11; 
break;
case 6: return 13; 
break;
case 7: return 35; 
break;
case 8: return 37; 
break;
case 9: return 14; 
break;
case 10: return 91; 
break;
case 11: return 92; 
break;
case 12: return 93; 
break;
case 13: return 94; 
break;
case 14: return 32; 
break;
case 15: return 95; 
break;
case 16: return 96; 
break;
case 17: return 81; 
break;
case 18: return 82; 
break;
case 19: return 43; 
break;
case 20: return 53; 
break;
case 21: return 15; 
break;
case 22: return 97; 
break;
case 23: return 98; 
break;
case 24: return 105; 
break;
case 25: return 106; 
break;
case 26: return 69; 
break;
case 27: return 73; 
break;
case 28: return 75; 
break;
case 29: return 48; 
break;
case 30: return 100; 
break;
case 31: return 101; 
break;
case 32: return 102; 
break;
case 33: return 59; 
break;
case 34: return 58; 
break;
case 35: return 10; 
break;
case 36: return 39; 
break;
case 37: return 41; 
break;
case 38: return 60; 
break;
case 39: return 66; 
break;
case 40: return 68; 
break;
case 41: return 104; 
break;
case 42: return 103; 
break;
case 43: return 49; 
break;
case 44: return 52; 
break;
case 45: return 47; 
break;
case 46: return 38; 
break;
case 47: return 54; 
break;
case 48: return 107; 
break;
case 49: return 30; 
break;
case 50: return 45; 
break;
case 51: return 44; 
break;
case 52: return 40; 
break;
case 53: return 42; 
break;
case 54: return 33; 
break;
case 55: return 88; 
break;
case 56: return 84; 
break;
case 57: return 83; 
break;
case 58: return 110; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 85; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 86; 
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 87; 
break;
case 62:/* skip whitespace */
break;
case 63:// comentario simple l√≠nea
break;
case 64:// comentario multiple l√≠neas
break;
case 65: 
break;
case 66: 
break;
case 67:return 5 //fin de cadena
break;
case 68: 	console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
				new ERLEXICO('Este es un error l√©xico', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
			
break;
case 69:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(!))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(;))/,/^(?:(>))/,/^(?:(<))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(=))/,/^(?:(==))/,/^(?:(!=))/,/^(?:(%))/,/^(?:(\*\*))/,/^(?:(\.))/,/^(?:(:))/,/^(?:(,))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(\+\+))/,/^(?:(--))/,/^(?:(\?))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(do))/,/^(?:(string))/,/^(?:(number))/,/^(?:(boolean))/,/^(?:(if))/,/^(?:(else))/,/^(?:(console\.log))/,/^(?:(let))/,/^(?:(const))/,/^(?:(function))/,/^(?:(void))/,/^(?:(return))/,/^(?:(continue))/,/^(?:(break))/,/^(?:(switch))/,/^(?:(case))/,/^(?:(while))/,/^(?:(for))/,/^(?:(default))/,/^(?:(length))/,/^(?:(graficar_ts))/,/^(?:(pop))/,/^(?:(push))/,/^(?:(of))/,/^(?:(in))/,/^(?:(type))/,/^(?:(true|false))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:("[^\"]*"))/,/^(?:('[^\']*'))/,/^(?:(`[^\`]*`))/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\\t)/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}