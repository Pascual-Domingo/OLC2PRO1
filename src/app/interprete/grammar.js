/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,7],$V2=[1,22],$V3=[1,23],$V4=[1,6],$V5=[1,17],$V6=[1,16],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[2,5,10,21,33,34,35,43,46,74,75,76],$Vc=[2,5,10,21,24,26,28,33,34,35,43,46,74,75,76],$Vd=[1,36],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,57],$Vi=[1,54],$Vj=[1,53],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,43],$Vs=[1,64],$Vt=[14,39],$Vu=[13,39],$Vv=[13,14,27,39,49,50,51,52,53,54,62,63,64,65,66,67,68,69],$Vw=[1,75],$Vx=[1,76],$Vy=[13,14,27,39,68,69],$Vz=[13,14,27,39,62,63,64,65,66,67,68,69],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,96],$VF=[2,5,10,21,24,26,28,32,33,34,35,43,46,74,75,76],$VG=[1,106],$VH=[1,103],$VI=[1,104],$VJ=[1,105],$VK=[2,40],$VL=[1,133],$VM=[2,10,21,24,26,28,33,35,43,46,74,75,76],$VN=[13,14,22,39,45],$VO=[13,14,27,39,49,50,62,63,64,65,66,67,68,69],$VP=[13,14,27,39,49,50,51,52,53,62,63,64,65,66,67,68,69],$VQ=[1,151],$VR=[1,152],$VS=[13,22,39],$VT=[24,26,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"CUERPO":4,"EOF":5,"INSTRUCCION":6,"FUNCION":7,"SENTENCIA":8,"LSENTENCIA":9,"timprimir":10,"parA":11,"EXP_LOGICA":12,"parC":13,"ptcoma":14,"SENTENCIA_IF":15,"VARIABLES":16,"LLAMADA":17,"TRANSFERENCIA":18,"MASMAS_MENOSMENOS":19,"SWITCH":20,"tSwitch":21,"llaveA":22,"CASOS":23,"llaveC":24,"CASO_EVALUAR":25,"tCase":26,"dospt":27,"tDefault":28,"IF":29,"ELSE":30,"ELSEIF":31,"tElse":32,"tif":33,"tFunction":34,"identificador":35,"PARAM_FUN":36,"TIPO_DATO":37,"PARAM_LLAMADA":38,"coma":39,"PARAM":40,"TIPO_VARIABLE":41,"tVoid":42,"tLet":43,"LISTA_ID":44,"igual":45,"tConst":46,"IDENT":47,"EXP":48,"mas":49,"menos":50,"por":51,"div":52,"modular":53,"exponente":54,"entero":55,"decimal":56,"cadena1":57,"cadena2":58,"cadena3":59,"booleano":60,"EXP_RELACIONAL":61,"mayque":62,"menque":63,"mayigque":64,"menigque":65,"igig":66,"noig":67,"and":68,"or":69,"not":70,"tString":71,"tNumber":72,"tBoolean":73,"tReturn":74,"tBreak":75,"tContinue":76,"masmas":77,"menosmenos":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"timprimir",11:"parA",13:"parC",14:"ptcoma",21:"tSwitch",22:"llaveA",24:"llaveC",26:"tCase",27:"dospt",28:"tDefault",32:"tElse",33:"tif",34:"tFunction",35:"identificador",39:"coma",42:"tVoid",43:"tLet",45:"igual",46:"tConst",49:"mas",50:"menos",51:"por",52:"div",53:"modular",54:"exponente",55:"entero",56:"decimal",57:"cadena1",58:"cadena2",59:"cadena3",60:"booleano",62:"mayque",63:"menque",64:"mayigque",65:"menigque",66:"igig",67:"noig",68:"and",69:"or",70:"not",71:"tString",72:"tNumber",73:"tBoolean",74:"tReturn",75:"tBreak",76:"tContinue",77:"masmas",78:"menosmenos"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,2],[9,1],[8,5],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[20,7],[23,2],[23,1],[25,4],[25,3],[15,1],[15,2],[15,2],[15,3],[31,3],[31,2],[30,4],[29,7],[7,9],[17,4],[38,3],[38,1],[38,0],[36,3],[36,1],[36,0],[40,2],[37,2],[37,2],[37,0],[16,3],[16,4],[16,5],[16,7],[44,3],[44,1],[47,1],[47,3],[47,3],[47,5],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,2],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,3],[48,1],[48,1],[48,1],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,1],[12,3],[12,3],[12,2],[12,1],[41,1],[41,1],[41,1],[41,1],[18,2],[18,1],[18,1],[18,1],[19,2],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-2], pila[pila.length-1]);
							
break;
case 3:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-1], undefined);
							
break;
case 4: case 9: case 10: case 14: case 21: case 38: case 66: case 67: case 75: case 79: case 83:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = {tipo: "INSTRUCCIONES", instruccion: [$$[$0]] } 
break;
case 6: case 17:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 26: case 32: case 35: case 46:
 this.$ = [$$[$0]]; 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 11: case 12: case 13: case 27: case 65:
 this.$ = $$[$0-1]; 
break;
case 15: case 68:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 16:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 18:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 19:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 20:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0], this._$.first_line, this._$.first_column); 
break;
case 22:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-1], $$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 25: case 31: case 34: case 45:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 28:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 29:
 this.$ = instruccionesAPI.nuevoFuncion($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);	
break;
case 30:
 this.$ = instruccionesAPI.nuevoLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 39:
 this.$ = TIPO_DATO.VOID; 
break;
case 41:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-2], $$[$0-1]); 
break;
case 42:
 this.$ = instruccionesAPI.nuevoVariable(undefined, [instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-4], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-3], undefined, $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 44:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-6], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 47:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 48:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 49:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-2], undefined, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 50:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 51:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column); 
break;
case 52:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column); 
break;
case 53:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 54:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 55:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULAR, this._$.first_line, this._$.first_column); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.EXPONENTE, this._$.first_line, this._$.first_column); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column); 
break;
case 58: case 59:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO, this._$.first_line, this._$.first_column); 
break;
case 60: case 61: case 62:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 76:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = TIPO_DATO.STRIN; 
break;
case 81:
 this.$ = TIPO_DATO.NUMERO; 
break;
case 82:
 this.$ = TIPO_DATO.BOOLENO; 
break;
case 84:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 85: case 86: case 87:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoMasmas($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 89:
 this.$ = instruccionesAPI.nuevoMenosmenos($$[$0-1], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,29:15,33:$V3,34:$V4,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},{1:[3]},{5:[1,24]},{2:$V0,4:25,5:[2,3],6:3,7:4,8:5,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,29:15,33:$V3,34:$V4,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},o($Vb,[2,4]),o($Vb,[2,5]),{35:[1,26]},{11:[1,27]},o($Vc,[2,9]),o($Vc,[2,10]),{14:[1,28]},{14:[1,29]},{14:[1,30]},o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,21],{30:31,31:32,32:[1,33]}),{35:$Vd,44:34,47:35},{11:$Ve,45:[1,37],77:$Vf,78:$Vg},{35:[1,41]},{2:$Vh,11:$Vi,12:42,14:[2,85],17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{14:[2,86]},{14:[2,87]},{11:[1,58]},{11:[1,59]},{1:[2,1]},{5:[2,2]},{11:[1,60]},{2:$Vh,11:$Vi,12:61,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,22]),o($Vc,[2,23],{30:62,32:[1,63]}),{22:$Vs,29:65,33:$V3},{14:[1,66],39:[1,67]},o($Vt,[2,46]),o($Vt,[2,47],{27:[1,68],45:[1,69]}),{2:$Vh,11:$Vi,12:70,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},o($Vu,[2,33],{61:44,48:45,17:55,19:56,38:71,12:72,2:$Vh,11:$Vi,35:$Vj,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,70:$Vr}),o($Vv,[2,88]),o($Vv,[2,89]),{27:[1,74],45:[1,73]},{14:[2,84],68:$Vw,69:$Vx},{2:$Vh,11:$Vi,12:77,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},o($Vy,[2,79],{62:[1,78],63:[1,79],64:[1,80],65:[1,81],66:[1,82],67:[1,83]}),o($Vz,[2,75],{49:[1,84],50:[1,85],51:$VA,52:$VB,53:$VC,54:$VD}),{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:90,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},o($Vv,[2,58]),o($Vv,[2,59]),o($Vv,[2,60]),o($Vv,[2,61]),o($Vv,[2,62]),o($Vv,[2,63]),o($Vv,[2,64],{11:$Ve,77:$Vf,78:$Vg}),{2:$Vh,11:$Vi,12:91,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},o($Vv,[2,66]),o($Vv,[2,67]),o($Vv,[2,68]),{2:$Vh,11:$Vi,12:92,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{2:$Vh,11:$Vi,12:93,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},o($Vu,[2,36],{36:94,40:95,35:$VE}),{13:[1,97],68:$Vw,69:$Vx},o($Vc,[2,24]),{22:$Vs,29:98,33:$V3},{2:$V0,8:100,9:99,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},o($VF,[2,26]),o($Vc,[2,41]),{35:$Vd,47:101},{35:$VG,41:102,71:$VH,72:$VI,73:$VJ},{2:$Vh,11:$Vi,12:107,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{14:[1,108],68:$Vw,69:$Vx},{13:[1,109],39:[1,110]},o($Vu,[2,32],{68:$Vw,69:$Vx}),{2:$Vh,11:$Vi,12:111,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{35:$VG,41:112,71:$VH,72:$VI,73:$VJ},{2:$Vh,11:$Vi,12:113,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{2:$Vh,11:$Vi,12:114,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},o($Vy,[2,78]),{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:115},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:116},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:117},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:118},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:119},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:120},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:121,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:122,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:123,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:124,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:125,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{2:$Vh,11:$Vi,17:55,19:56,35:$Vj,48:126,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},o($Vv,[2,57]),{13:[1,127],68:$Vw,69:$Vx},{13:[1,128],68:$Vw,69:$Vx},{13:[1,129],68:$Vw,69:$Vx},{13:[1,130],39:[1,131]},o($Vu,[2,35]),o($Vu,$VK,{37:132,27:$VL}),{14:[1,134]},o($VF,[2,25]),{2:$V0,8:136,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,24:[1,135],29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},o($VM,[2,7]),o($Vt,[2,45]),o($Vt,[2,48],{45:[1,137]}),o($VN,[2,80]),o($VN,[2,81]),o($VN,[2,82]),o($VN,[2,83]),o($Vt,[2,49],{68:$Vw,69:$Vx}),o($Vc,[2,42]),o($Vv,[2,30]),{2:$Vh,11:$Vi,12:138,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{14:[1,139],68:$Vw,69:$Vx},{45:[1,140]},o($Vy,[2,76]),o([13,14,27,39,69],[2,77],{68:$Vw}),o($Vz,[2,69]),o($Vz,[2,70]),o($Vz,[2,71]),o($Vz,[2,72]),o($Vz,[2,73]),o($Vz,[2,74]),o($VO,[2,51],{51:$VA,52:$VB,53:$VC,54:$VD}),o($VO,[2,52],{51:$VA,52:$VB,53:$VC,54:$VD}),o($VP,[2,53],{54:$VD}),o($VP,[2,54],{54:$VD}),o($VP,[2,55],{54:$VD}),o($Vv,[2,56]),o($Vv,[2,65]),{22:[1,141]},{22:[1,142]},{22:$VK,27:$VL,37:143},{35:$VE,40:144},o($Vu,[2,37]),{35:$VG,41:145,42:[1,146],71:$VH,72:$VI,73:$VJ},o($Vc,[2,8]),o($Vc,[2,27]),o($VM,[2,6]),{2:$Vh,11:$Vi,12:147,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},o($Vu,[2,31],{68:$Vw,69:$Vx}),o($Vc,[2,43]),{2:$Vh,11:$Vi,12:148,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{23:149,25:150,26:$VQ,28:$VR},{2:$V0,8:100,9:153,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},{22:[1,154]},o($Vu,[2,34]),o($VS,[2,38]),o($VS,[2,39]),o($Vt,[2,50],{68:$Vw,69:$Vx}),{14:[1,155],68:$Vw,69:$Vx},{24:[1,156],25:157,26:$VQ,28:$VR},o($VT,[2,18]),{2:$Vh,11:$Vi,12:158,17:55,19:56,35:$Vj,48:45,50:$Vk,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:44,70:$Vr},{27:[1,159]},{2:$V0,8:136,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,24:[1,160],29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},{2:$V0,8:100,9:161,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},o($Vc,[2,44]),o($Vc,[2,16]),o($VT,[2,17]),{27:[1,162],68:$Vw,69:$Vx},{2:$V0,8:100,9:163,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},o($VF,[2,28]),{2:$V0,8:136,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,24:[1,164],29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},{2:$V0,8:100,9:165,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,29:15,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va},o($VT,[2,20],{15:8,16:9,17:10,18:11,19:12,20:13,29:15,8:136,2:$V0,10:$V1,21:$V2,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va}),o($Vb,[2,29]),o($VT,[2,19],{15:8,16:9,17:10,18:11,19:12,20:13,29:15,8:136,2:$V0,10:$V1,21:$V2,33:$V3,35:$V5,43:$V6,46:$V7,74:$V8,75:$V9,76:$Va})],
defaultActions: {20:[2,86],21:[2,87],24:[2,1],25:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 70; 
break;
case 1: return 49; 
break;
case 2: return 50; 
break;
case 3: return 51; 
break;
case 4: return 52; 
break;
case 5: return 11; 
break;
case 6: return 13; 
break;
case 7: return 22; 
break;
case 8: return 24; 
break;
case 9: return 14; 
break;
case 10: return 62; 
break;
case 11: return 63; 
break;
case 12: return 64; 
break;
case 13: return 65; 
break;
case 14: return 45; 
break;
case 15: return 66; 
break;
case 16: return 67; 
break;
case 17: return 53; 
break;
case 18: return 54; 
break;
case 19: return 27; 
break;
case 20: return 39; 
break;
case 21: return 68; 
break;
case 22: return 69; 
break;
case 23: return 77; 
break;
case 24: return 78; 
break;
case 25: return 71; 
break;
case 26: return 72; 
break;
case 27: return 73; 
break;
case 28: return 33; 
break;
case 29: return 32; 
break;
case 30: return 10; 
break;
case 31: return 43; 
break;
case 32: return 46; 
break;
case 33: return 34; 
break;
case 34: return 42; 
break;
case 35: return 74; 
break;
case 36: return 76; 
break;
case 37: return 75; 
break;
case 38: return 21; 
break;
case 39: return 26; 
break;
case 40: return 28; 
break;
case 41: return 60; 
break;
case 42: return 56; 
break;
case 43: return 55; 
break;
case 44: return 35; 
break;
case 45: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57; 
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 47: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 48:/* skip whitespace */
break;
case 49:// comentario simple l√≠nea
break;
case 50:// comentario multiple l√≠neas
break;
case 51: 
break;
case 52: 
break;
case 53:return 5 //fin de cadena
break;
case 54:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(!))/i,/^(?:(\+))/i,/^(?:(-))/i,/^(?:(\*))/i,/^(?:(\/))/i,/^(?:(\())/i,/^(?:(\)))/i,/^(?:(\{))/i,/^(?:(\}))/i,/^(?:(;))/i,/^(?:(>))/i,/^(?:(<))/i,/^(?:(>=))/i,/^(?:(<=))/i,/^(?:(=))/i,/^(?:(==))/i,/^(?:(!=))/i,/^(?:(%))/i,/^(?:(\*\*))/i,/^(?:(:))/i,/^(?:(,))/i,/^(?:(&&))/i,/^(?:(\|\|))/i,/^(?:(\+\+))/i,/^(?:(--))/i,/^(?:(string))/i,/^(?:(number))/i,/^(?:(boolean))/i,/^(?:(if))/i,/^(?:(else))/i,/^(?:(console\.log))/i,/^(?:(let))/i,/^(?:(const))/i,/^(?:(function))/i,/^(?:(void))/i,/^(?:(return))/i,/^(?:(continue))/i,/^(?:(break))/i,/^(?:(switch))/i,/^(?:(case))/i,/^(?:(default))/i,/^(?:(true|false))/i,/^(?:([0-9]+(\.[0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/i,/^(?:("[^\"]*"))/i,/^(?:('[^\']*'))/i,/^(?:(`[^\`]*`))/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\\t)/i,/^(?:\\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}