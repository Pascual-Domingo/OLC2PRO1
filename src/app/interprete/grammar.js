/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,7],$V2=[1,29],$V3=[1,21],$V4=[1,27],$V5=[1,28],$V6=[1,26],$V7=[1,30],$V8=[1,6],$V9=[1,20],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[2,5,10,25,29,30,31,32,42,43,51,54,55,85,86],$Vf=[2,5,10,25,28,29,30,31,32,35,37,42,43,51,54,55,85,86],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,65],$Vk=[1,62],$Vl=[1,61],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,51],$Vu=[1,75],$Vv=[14,47],$Vw=[2,63],$Vx=[13,47],$Vy=[13,14,36,47,56,60,61,62,63,64,65,73,74,75,76,77,78,79,80],$Vz=[1,89],$VA=[1,87],$VB=[1,88],$VC=[13,14,36,47,56,79,80],$VD=[13,14,36,47,56,73,74,75,76,77,78,79,80],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,118],$VJ=[2,5,10,25,28,29,30,31,32,35,37,41,42,43,51,54,55,85,86],$VK=[2,5,10,11,25,28,29,30,31,32,35,37,42,43,51,54,55,61,66,67,68,69,70,71,81,85,86],$VL=[1,123],$VM=[1,130],$VN=[1,127],$VO=[1,128],$VP=[1,129],$VQ=[1,131],$VR=[2,10,25,28,29,30,31,32,35,37,42,51,54,55,85,86],$VS=[2,11,29,61,66,67,68,69,70,71,81],$VT=[2,49],$VU=[1,166],$VV=[2,65],$VW=[2,64],$VX=[13,14,27,47,52],$VY=[1,174],$VZ=[13,14,36,47,56,60,61,73,74,75,76,77,78,79,80],$V_=[13,14,36,47,56,60,61,62,63,64,73,74,75,76,77,78,79,80],$V$=[1,199],$V01=[1,200],$V11=[13,27,47],$V21=[2,66],$V31=[1,211],$V41=[28,35,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"CUERPO":4,"EOF":5,"INSTRUCCION":6,"FUNCION":7,"SENTENCIA":8,"LSENTENCIA":9,"timprimir":10,"parA":11,"EXP_LOGICA":12,"parC":13,"ptcoma":14,"SENTENCIA_IF":15,"VARIABLES":16,"LLAMADA":17,"TRANSFERENCIA":18,"MASMAS_MENOSMENOS":19,"SWITCH":20,"INS_WHILE":21,"INS_DOWHILE":22,"INS_FOR":23,"OPERADOR_TERNARIO":24,"tFor":25,"DECLARACION_FOR":26,"llaveA":27,"llaveC":28,"identificador":29,"tWhile":30,"tDo":31,"tSwitch":32,"CASOS":33,"CASO_EVALUAR":34,"tCase":35,"dospt":36,"tDefault":37,"IF":38,"ELSE":39,"ELSEIF":40,"tElse":41,"tif":42,"tFunction":43,"PARAM_FUN":44,"TIPO_DATO":45,"PARAM_LLAMADA":46,"coma":47,"PARAM":48,"TIPO_VARIABLE":49,"tVoid":50,"tLet":51,"igual":52,"TERNARIO":53,"tConst":54,"tReturn":55,"interrogacionC":56,"LISTA_ID":57,"IDENT":58,"EXP":59,"mas":60,"menos":61,"por":62,"div":63,"modular":64,"exponente":65,"entero":66,"decimal":67,"cadena1":68,"cadena2":69,"cadena3":70,"booleano":71,"EXP_RELACIONAL":72,"mayque":73,"menque":74,"mayigque":75,"menigque":76,"igig":77,"noig":78,"and":79,"or":80,"not":81,"tString":82,"tNumber":83,"tBoolean":84,"tBreak":85,"tContinue":86,"masmas":87,"menosmenos":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"timprimir",11:"parA",13:"parC",14:"ptcoma",25:"tFor",27:"llaveA",28:"llaveC",29:"identificador",30:"tWhile",31:"tDo",32:"tSwitch",35:"tCase",36:"dospt",37:"tDefault",41:"tElse",42:"tif",43:"tFunction",47:"coma",50:"tVoid",51:"tLet",52:"igual",54:"tConst",55:"tReturn",56:"interrogacionC",60:"mas",61:"menos",62:"por",63:"div",64:"modular",65:"exponente",66:"entero",67:"decimal",68:"cadena1",69:"cadena2",70:"cadena3",71:"booleano",73:"mayque",74:"menque",75:"mayigque",76:"menigque",77:"igig",78:"noig",79:"and",80:"or",81:"not",82:"tString",83:"tNumber",84:"tBoolean",85:"tBreak",86:"tContinue",87:"masmas",88:"menosmenos"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,2],[9,1],[8,5],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[23,10],[26,1],[26,2],[21,7],[22,9],[20,7],[33,2],[33,1],[34,4],[34,3],[15,1],[15,2],[15,2],[15,3],[40,3],[40,2],[39,4],[38,7],[7,9],[17,4],[46,3],[46,1],[46,0],[44,3],[44,1],[44,0],[48,2],[45,2],[45,2],[45,0],[24,5],[24,7],[24,5],[24,7],[24,4],[24,3],[53,5],[16,3],[16,4],[16,5],[16,7],[57,3],[57,1],[58,1],[58,3],[58,3],[58,5],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,2],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,3],[59,1],[59,1],[59,1],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,1],[12,3],[12,3],[12,2],[12,1],[49,1],[49,1],[49,1],[49,1],[18,2],[18,1],[18,1],[18,1],[19,2],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-2], pila[pila.length-1]);
							
break;
case 3:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-1], undefined);
							
break;
case 4: case 9: case 10: case 14: case 15: case 16: case 17: case 18: case 21: case 30: case 47: case 82: case 83: case 91: case 95: case 99:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = {tipo: "INSTRUCCIONES", instruccion: [$$[$0]] } 
break;
case 6: case 26:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 35: case 41: case 44: case 62:
 this.$ = [$$[$0]]; 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 11: case 12: case 13: case 36: case 81:
 this.$ = $$[$0-1]; 
break;
case 19:
 //console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
					new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column);
				
break;
case 20:
 this.$ = instruccionesAPI.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 22:
 this.$ = instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 27:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 28:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 29:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0], this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-1], $$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 33:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 34: case 40: case 43: case 61:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 37:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 38:
 this.$ = instruccionesAPI.nuevoFuncion($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);	
break;
case 39:
 this.$ = instruccionesAPI.nuevoLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 46:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 48:
 this.$ = TIPO_DATO.VOID; 
break;
case 50: case 52: case 59:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-4], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-3], undefined, $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 51: case 53: case 60:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-6], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 54: case 58:
 this.$ = instruccionesAPI.nuevoVariable(undefined, [instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 55:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 56:
 this.$ = instruccionesAPI.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 57:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-2], $$[$0-1]); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-2], undefined, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULAR, this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.EXPONENTE, this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column); 
break;
case 74: case 75:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO, this._$.first_line, this._$.first_column); 
break;
case 76: case 77: case 78:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 84:
 new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 87:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 89:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 90:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 92:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column); 
break;
case 93:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column); 
break;
case 94:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column); 
break;
case 96:
 this.$ = TIPO_DATO.STRIN; 
break;
case 97:
 this.$ = TIPO_DATO.NUMERO; 
break;
case 98:
 this.$ = TIPO_DATO.BOOLENO; 
break;
case 100:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 101: case 102: case 103:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 104:
 this.$ = instruccionesAPI.nuevoMasmas($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 105:
 this.$ = instruccionesAPI.nuevoMenosmenos($$[$0-1], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,43:$V8,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{1:[3]},{5:[1,31]},{2:$V0,4:32,5:[2,3],6:3,7:4,8:5,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,43:$V8,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($Ve,[2,4]),o($Ve,[2,5]),{29:[1,33]},{11:[1,34]},o($Vf,[2,9]),o($Vf,[2,10]),{14:[1,35]},{14:[1,36]},{14:[1,37]},o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,30],{39:38,40:39,41:[1,40]}),{29:[1,42],57:41,58:43},{11:$Vg,52:[1,44],87:$Vh,88:$Vi},{29:[1,48]},{2:$Vj,11:$Vk,12:49,14:[2,101],17:63,19:64,29:$Vl,53:50,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{14:[2,102]},{14:[2,103]},{11:[1,66]},{11:[1,67]},{27:[1,68]},{11:[1,69]},{11:[1,70]},{1:[2,1]},{5:[2,2]},{11:[1,71]},{2:$Vj,11:$Vk,12:72,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,31]),o($Vf,[2,32],{39:73,41:[1,74]}),{27:$Vu,38:76,42:$V7},{14:[1,77],47:[1,78]},o($Vv,$Vw,{36:[1,80],52:[1,79]}),o($Vv,[2,62]),{2:$Vj,11:$Vk,12:81,17:63,19:64,29:$Vl,53:82,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vx,[2,42],{72:52,59:53,17:63,19:64,46:83,12:84,2:$Vj,11:$Vk,29:$Vl,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,81:$Vt}),o($Vy,[2,104]),o($Vy,[2,105]),{36:[1,86],52:[1,85]},{14:[2,100],56:$Vz,79:$VA,80:$VB},{14:[1,90]},{2:$Vj,11:$Vk,12:91,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($VC,[2,95],{73:[1,92],74:[1,93],75:[1,94],76:[1,95],77:[1,96],78:[1,97]}),o($VD,[2,91],{60:[1,98],61:[1,99],62:$VE,63:$VF,64:$VG,65:$VH}),{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:104,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},o($Vy,[2,74]),o($Vy,[2,75]),o($Vy,[2,76]),o($Vy,[2,77]),o($Vy,[2,78]),o($Vy,[2,79]),o($Vy,[2,80],{11:$Vg,87:$Vh,88:$Vi}),{2:$Vj,11:$Vk,12:105,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vy,[2,82]),o($Vy,[2,83]),o($Vy,[2,84]),{2:$Vj,11:$Vk,12:106,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{2:$Vj,11:$Vk,12:107,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{2:$V0,8:109,9:108,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{16:111,26:110,29:[1,112],51:[1,113],54:[1,114]},{2:$Vj,11:$Vk,12:115,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vx,[2,45],{44:116,48:117,29:$VI}),{13:[1,119],79:$VA,80:$VB},o($Vf,[2,33]),{27:$Vu,38:120,42:$V7},{2:$V0,8:109,9:121,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($VJ,[2,35]),o($VK,[2,57]),{29:$VL,58:122},{2:$Vj,11:$Vk,12:125,17:63,19:64,29:$Vl,53:124,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{29:$VM,49:126,82:$VN,83:$VO,84:$VP},{14:$VQ,56:$Vz,79:$VA,80:$VB},{14:[1,132]},{13:[1,133],47:[1,134]},o($Vx,[2,41],{79:$VA,80:$VB}),{2:$Vj,11:$Vk,12:135,17:63,19:64,29:$Vl,53:136,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{29:$VM,49:137,82:$VN,83:$VO,84:$VP},{2:$Vj,11:$Vk,12:138,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{2:$Vj,11:$Vk,12:139,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{2:$Vj,11:$Vk,12:140,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vf,[2,55]),o($VC,[2,94]),{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:141},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:142},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:143},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:144},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:145},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:146},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:147,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:148,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:149,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:150,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:151,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{2:$Vj,11:$Vk,17:63,19:64,29:$Vl,59:152,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},o($Vy,[2,73]),{13:[1,153],79:$VA,80:$VB},{13:[1,154],79:$VA,80:$VB},{13:[1,155],79:$VA,80:$VB},{2:$V0,8:157,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,28:[1,156],29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($VR,[2,7]),{2:$Vj,11:$Vk,12:158,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($VS,[2,21]),{14:[1,159],52:[1,160]},{29:$VL,57:41,58:43},{29:[1,161]},{13:[1,162],79:$VA,80:$VB},{13:[1,163],47:[1,164]},o($Vx,[2,44]),o($Vx,$VT,{45:165,36:$VU}),{14:[1,167]},o($VJ,[2,34]),{2:$V0,8:157,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,28:[1,168],29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($Vv,[2,61]),o($Vv,$Vw,{36:[1,169],52:[1,170]}),{14:[1,171]},o($Vv,$VV,{56:$Vz,79:$VA,80:$VB}),o($Vv,$VW,{52:[1,172]}),o($VX,[2,96]),o($VX,[2,97]),o($VX,[2,98]),o($VX,[2,99]),o($VK,[2,58]),o($Vf,[2,54]),o($Vy,[2,39]),{2:$Vj,11:$Vk,12:173,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{14:$VY,56:$Vz,79:$VA,80:$VB},{14:[1,175]},{52:[1,176]},o($VC,[2,92]),o([13,14,36,47,56,80],[2,93],{79:$VA}),{36:[1,177],79:$VA,80:$VB},o($VD,[2,85]),o($VD,[2,86]),o($VD,[2,87]),o($VD,[2,88]),o($VD,[2,89]),o($VD,[2,90]),o($VZ,[2,67],{62:$VE,63:$VF,64:$VG,65:$VH}),o($VZ,[2,68],{62:$VE,63:$VF,64:$VG,65:$VH}),o($V_,[2,69],{65:$VH}),o($V_,[2,70],{65:$VH}),o($V_,[2,71],{65:$VH}),o($Vy,[2,72]),o($Vy,[2,81]),{27:[1,178]},{27:[1,179]},{30:[1,180]},o($VR,[2,6]),{14:[1,181],79:$VA,80:$VB},o($VS,[2,22]),{2:$Vj,11:$Vk,12:182,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{36:[1,184],52:[1,183]},{27:[1,185]},{27:$VT,36:$VU,45:186},{29:$VI,48:187},o($Vx,[2,46]),{29:$VM,49:188,50:[1,189],82:$VN,83:$VO,84:$VP},o($Vf,[2,8]),o($Vf,[2,36]),{29:$VM,49:190,82:$VN,83:$VO,84:$VP},{2:$Vj,11:$Vk,12:191,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vf,[2,50]),{2:$Vj,11:$Vk,12:193,17:63,19:64,29:$Vl,53:192,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vx,[2,40],{79:$VA,80:$VB}),o($VK,[2,59]),o($Vf,[2,52]),{2:$Vj,11:$Vk,12:194,17:63,19:64,29:$Vl,53:195,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{2:$Vj,11:$Vk,12:196,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{33:197,34:198,35:$V$,37:$V01},{2:$V0,8:109,9:201,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{11:[1,202]},{19:203,29:[1,204]},{14:$VQ,79:$VA,80:$VB},{2:$Vj,11:$Vk,12:205,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{29:$VM,49:206,82:$VN,83:$VO,84:$VP},{2:$V0,8:109,9:207,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{27:[1,208]},o($Vx,[2,43]),o($V11,[2,47]),o($V11,[2,48]),o($Vv,$VW,{52:[1,209]}),o($Vv,$VV,{79:$VA,80:$VB}),{14:[1,210]},o($Vv,$V21,{56:$Vz,79:$VA,80:$VB}),{14:$V31,56:$Vz,79:$VA,80:$VB},{14:[1,212]},{14:[2,56],79:$VA,80:$VB},{28:[1,213],34:214,35:$V$,37:$V01},o($V41,[2,27]),{2:$Vj,11:$Vk,12:215,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{36:[1,216]},{2:$V0,8:157,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,28:[1,217],29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{2:$Vj,11:$Vk,12:218,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},{13:[1,219]},{87:$Vh,88:$Vi},{14:$VY,79:$VA,80:$VB},{52:[1,220]},{2:$V0,8:157,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,28:[1,221],29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{2:$V0,8:109,9:222,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{2:$Vj,11:$Vk,12:223,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($Vf,[2,51]),o($VK,[2,60]),o($Vf,[2,53]),o($Vf,[2,25]),o($V41,[2,26]),{36:[1,224],79:$VA,80:$VB},{2:$V0,8:109,9:225,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($Vf,[2,23]),{13:[1,226],79:$VA,80:$VB},{27:[1,227]},{2:$Vj,11:$Vk,12:228,17:63,19:64,29:$Vl,59:53,61:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:52,81:$Vt},o($VJ,[2,37]),{2:$V0,8:157,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,28:[1,229],29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($Vv,$V21,{79:$VA,80:$VB}),{2:$V0,8:109,9:230,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($V41,[2,29],{15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,38:19,8:157,2:$V0,10:$V1,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd}),{14:[1,231]},{2:$V0,8:109,9:232,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},{14:$V31,79:$VA,80:$VB},o($Ve,[2,38]),o($V41,[2,28],{15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,38:19,8:157,2:$V0,10:$V1,25:$V2,29:$V3,30:$V4,31:$V5,32:$V6,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd}),o($Vf,[2,24]),{2:$V0,8:157,10:$V1,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V2,28:[1,233],29:$V3,30:$V4,31:$V5,32:$V6,38:19,42:$V7,51:$V9,54:$Va,55:$Vb,85:$Vc,86:$Vd},o($Vf,[2,20])],
defaultActions: {24:[2,102],25:[2,103],31:[2,1],32:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import { TE } from './tabla_errores';
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const { SINTACTOCO, ERLEXICO } = require('./tabla_errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 81; 
break;
case 1: return 60; 
break;
case 2: return 61; 
break;
case 3: return 62; 
break;
case 4: return 63; 
break;
case 5: return 11; 
break;
case 6: return 13; 
break;
case 7: return 27; 
break;
case 8: return 28; 
break;
case 9: return 14; 
break;
case 10: return 73; 
break;
case 11: return 74; 
break;
case 12: return 75; 
break;
case 13: return 76; 
break;
case 14: return 52; 
break;
case 15: return 77; 
break;
case 16: return 78; 
break;
case 17: return 64; 
break;
case 18: return 65; 
break;
case 19: return 36; 
break;
case 20: return 47; 
break;
case 21: return 79; 
break;
case 22: return 80; 
break;
case 23: return 87; 
break;
case 24: return 88; 
break;
case 25: return 56; 
break;
case 26: return 31; 
break;
case 27: return 82; 
break;
case 28: return 83; 
break;
case 29: return 84; 
break;
case 30: return 42; 
break;
case 31: return 41; 
break;
case 32: return 10; 
break;
case 33: return 51; 
break;
case 34: return 54; 
break;
case 35: return 43; 
break;
case 36: return 50; 
break;
case 37: return 55; 
break;
case 38: return 86; 
break;
case 39: return 85; 
break;
case 40: return 32; 
break;
case 41: return 35; 
break;
case 42: return 30; 
break;
case 43: return 25; 
break;
case 44: return 37; 
break;
case 45: return 71; 
break;
case 46: return 67; 
break;
case 47: return 66; 
break;
case 48: return 29; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69; 
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 52:/* skip whitespace */
break;
case 53:// comentario simple l√≠nea
break;
case 54:// comentario multiple l√≠neas
break;
case 55: 
break;
case 56: 
break;
case 57:return 5 //fin de cadena
break;
case 58: 	console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
				new ERLEXICO('Este es un error l√©xico', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
			
break;
case 59:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(!))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(;))/,/^(?:(>))/,/^(?:(<))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(=))/,/^(?:(==))/,/^(?:(!=))/,/^(?:(%))/,/^(?:(\*\*))/,/^(?:(:))/,/^(?:(,))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(\+\+))/,/^(?:(--))/,/^(?:(\?))/,/^(?:(do))/,/^(?:(string))/,/^(?:(number))/,/^(?:(boolean))/,/^(?:(if))/,/^(?:(else))/,/^(?:(console\.log))/,/^(?:(let))/,/^(?:(const))/,/^(?:(function))/,/^(?:(void))/,/^(?:(return))/,/^(?:(continue))/,/^(?:(break))/,/^(?:(switch))/,/^(?:(case))/,/^(?:(while))/,/^(?:(for))/,/^(?:(default))/,/^(?:(true|false))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:("[^\"]*"))/,/^(?:('[^\']*'))/,/^(?:(`[^\`]*`))/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\\t)/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}