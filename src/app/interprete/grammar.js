/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,8],$V2=[1,30],$V3=[1,22],$V4=[1,28],$V5=[1,29],$V6=[1,27],$V7=[1,31],$V8=[1,7],$V9=[1,21],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[2,5,10,28,32,33,34,35,45,46,53,55,56,92,93],$Vf=[2,5,10,28,31,32,33,34,35,38,40,45,46,53,55,56,92,93],$Vg=[1,47],$Vh=[1,50],$Vi=[1,48],$Vj=[1,49],$Vk=[1,70],$Vl=[1,65],$Vm=[1,64],$Vn=[1,71],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,54],$Vw=[1,82],$Vx=[14,15],$Vy=[2,66],$Vz=[13,15],$VA=[13,14,15,39,57,63,65,66,67,68,69,70,80,81,82,83,84,85,86,87],$VB=[1,97],$VC=[1,95],$VD=[1,96],$VE=[13,14,15,39,57,63,86,87],$VF=[13,14,15,39,57,63,80,81,82,83,84,85,86,87],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[15,63],$VN=[1,121],$VO=[1,130],$VP=[2,5,10,28,31,32,33,34,35,38,40,44,45,46,53,55,56,92,93],$VQ=[2,5,10,11,28,31,32,33,34,35,38,40,45,46,53,55,56,61,66,71,72,73,74,75,76,88,92,93],$VR=[1,137],$VS=[1,144],$VT=[1,141],$VU=[1,142],$VV=[1,143],$VW=[1,145],$VX=[2,10,28,31,32,33,34,35,38,40,45,53,55,56,92,93],$VY=[2,11,32,61,66,71,72,73,74,75,76,88],$VZ=[2,52],$V_=[1,184],$V$=[2,68],$V01=[2,67],$V11=[1,192],$V21=[13,14,15,27,30,61],$V31=[1,194],$V41=[13,14,15,39,57,63,65,66,80,81,82,83,84,85,86,87],$V51=[13,14,15,39,57,63,65,66,67,68,69,80,81,82,83,84,85,86,87],$V61=[1,222],$V71=[1,223],$V81=[13,15,30],$V91=[2,69],$Va1=[1,235],$Vb1=[31,38,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"CUERPO":4,"EOF":5,"INSTRUCCION":6,"FUNCION":7,"SENTENCIA":8,"LSENTENCIA":9,"timprimir":10,"parA":11,"EXP_LOGICA":12,"parC":13,"ptcoma":14,"coma":15,"SENTENCIA_IF":16,"VARIABLES":17,"LLAMADA":18,"TRANSFERENCIA":19,"MASMAS_MENOSMENOS":20,"SWITCH":21,"INS_WHILE":22,"INS_DOWHILE":23,"INS_FOR":24,"OPERADOR_TERNARIO":25,"ACCESOARRAY":26,"igual":27,"tFor":28,"DECLARACION_FOR":29,"llaveA":30,"llaveC":31,"identificador":32,"tWhile":33,"tDo":34,"tSwitch":35,"CASOS":36,"CASO_EVALUAR":37,"tCase":38,"dospt":39,"tDefault":40,"IF":41,"ELSE":42,"ELSEIF":43,"tElse":44,"tif":45,"tFunction":46,"PARAM_FUN":47,"TIPO_DATO":48,"PARAM_LLAMADA":49,"PARAM":50,"TIPO_VARIABLE":51,"tVoid":52,"tLet":53,"TERNARIO":54,"tConst":55,"tReturn":56,"interrogacionC":57,"LISTA_ID":58,"IDENT":59,"ASIGARRAY":60,"corchA":61,"LISEXP":62,"corchC":63,"EXP":64,"mas":65,"menos":66,"por":67,"div":68,"modular":69,"exponente":70,"entero":71,"decimal":72,"cadena1":73,"cadena2":74,"cadena3":75,"booleano":76,"punto":77,"tLength":78,"EXP_RELACIONAL":79,"mayque":80,"menque":81,"mayigque":82,"menigque":83,"igig":84,"noig":85,"and":86,"or":87,"not":88,"tString":89,"tNumber":90,"tBoolean":91,"tBreak":92,"tContinue":93,"masmas":94,"menosmenos":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"timprimir",11:"parA",13:"parC",14:"ptcoma",15:"coma",27:"igual",28:"tFor",30:"llaveA",31:"llaveC",32:"identificador",33:"tWhile",34:"tDo",35:"tSwitch",38:"tCase",39:"dospt",40:"tDefault",44:"tElse",45:"tif",46:"tFunction",52:"tVoid",53:"tLet",55:"tConst",56:"tReturn",57:"interrogacionC",61:"corchA",63:"corchC",65:"mas",66:"menos",67:"por",68:"div",69:"modular",70:"exponente",71:"entero",72:"decimal",73:"cadena1",74:"cadena2",75:"cadena3",76:"booleano",77:"punto",78:"tLength",80:"mayque",81:"menque",82:"mayigque",83:"menigque",84:"igig",85:"noig",86:"and",87:"or",88:"not",89:"tString",90:"tNumber",91:"tBoolean",92:"tBreak",93:"tContinue",94:"masmas",95:"menosmenos"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[9,2],[9,1],[8,5],[8,7],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,4],[8,1],[24,10],[29,1],[29,2],[22,7],[23,9],[21,7],[36,2],[36,1],[37,4],[37,3],[16,1],[16,2],[16,2],[16,3],[43,3],[43,2],[42,4],[41,7],[7,9],[18,4],[49,3],[49,1],[49,0],[47,3],[47,1],[47,0],[50,2],[48,2],[48,2],[48,0],[25,5],[25,7],[25,5],[25,7],[25,4],[25,3],[54,5],[17,3],[17,4],[17,5],[17,7],[58,3],[58,1],[59,1],[59,3],[59,3],[59,5],[60,3],[62,3],[62,1],[62,0],[26,4],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,2],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,3],[64,3],[64,1],[64,1],[64,1],[64,1],[64,1],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,1],[12,3],[12,3],[12,2],[12,1],[51,1],[51,1],[51,1],[51,3],[51,1],[19,2],[19,1],[19,1],[19,1],[20,2],[20,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-2], pila[pila.length-1]);
							
break;
case 3:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-1], undefined);
							
break;
case 4: case 95:
 new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column); 
break;
case 5: case 11: case 12: case 16: case 17: case 18: case 19: case 20: case 24: case 33: case 50: case 91: case 92: case 94: case 102: case 106: case 111:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = {tipo: "INSTRUCCIONES", instruccion: [$$[$0]] } 
break;
case 7: case 29:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 8: case 38: case 44: case 47: case 65: case 72:
 this.$ = [$$[$0]]; 
break;
case 9:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 10:
 this.$ = instruccionesAPI.nuevoImprimirArray($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 13: case 14: case 15: case 39: case 70: case 90:
 this.$ = $$[$0-1]; 
break;
case 21:
 this.$ = instruccionesAPI.nuevoValorArray($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 22:
 //console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
					new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column);
				
break;
case 23:
 this.$ = instruccionesAPI.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 27:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 28:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 31:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0], this._$.first_line, this._$.first_column); 
break;
case 34:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 35:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-1], $$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 37: case 43: case 46: case 64: case 71:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 40:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoFuncion($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);	
break;
case 42:
 this.$ = instruccionesAPI.nuevoLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 49:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 51:
 this.$ = TIPO_DATO.VOID; 
break;
case 53: case 55: case 62:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-4], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-3], undefined, $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 54: case 56: case 63:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-6], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 57: case 61:
 this.$ = instruccionesAPI.nuevoVariable(undefined, [instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 59:
 this.$ = instruccionesAPI.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 60:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-2], $$[$0-1]); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-2], undefined, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoAcceso($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 75:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column); 
break;
case 76:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULAR, this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.EXPONENTE, this._$.first_line, this._$.first_column); 
break;
case 81:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column); 
break;
case 82: case 83:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO, this._$.first_line, this._$.first_column); 
break;
case 84: case 85: case 86:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column); 
break;
case 87:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 89:
 this.$ = instruccionesAPI.nuevoLength($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 93:
 this.$ = instruccionesAPI.nuevoAsigVec($$[$0]); 
break;
case 96:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 97:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 98:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 99:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 100:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 101:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 103:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column); 
break;
case 104:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column); 
break;
case 105:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column); 
break;
case 107:
 this.$ = TIPO_DATO.STRING; 
break;
case 108:
 this.$ = TIPO_DATO.NUMERO; 
break;
case 109:
 this.$ = TIPO_DATO.BOOLEANO; 
break;
case 110:
 this.$= $$[$0-2]; 
break;
case 112:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 113: case 114: case 115:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 116:
 this.$ = instruccionesAPI.nuevoMasmas($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 117:
 this.$ = instruccionesAPI.nuevoMenosmenos($$[$0-1], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,46:$V8,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},{1:[3]},{5:[1,32]},{2:$V0,4:33,5:[2,3],6:3,7:5,8:6,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,46:$V8,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),{32:[1,34]},{11:[1,35]},o($Vf,[2,11]),o($Vf,[2,12]),{14:[1,36]},{14:[1,37]},{14:[1,38]},o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),{27:[1,39]},o($Vf,[2,33],{42:40,43:41,44:[1,42]}),{32:[1,44],58:43,59:45},{11:$Vg,27:[1,46],61:$Vh,94:$Vi,95:$Vj},{32:[1,51]},{2:$Vk,11:$Vl,12:52,14:[2,113],18:66,20:67,26:69,32:$Vm,54:53,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{14:[2,114]},{14:[2,115]},{11:[1,72]},{11:[1,73]},{30:[1,74]},{11:[1,75]},{11:[1,76]},{1:[2,1]},{5:[2,2]},{11:[1,77]},{2:$Vk,11:$Vl,12:78,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{2:$Vk,11:$Vl,12:79,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vf,[2,34]),o($Vf,[2,35],{42:80,44:[1,81]}),{30:$Vw,41:83,45:$V7},{14:[1,84],15:[1,85]},o($Vx,$Vy,{27:[1,86],39:[1,87]}),o($Vx,[2,65]),{2:$Vk,11:$Vl,12:88,18:66,20:67,26:69,32:$Vm,54:89,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vz,[2,45],{79:55,64:56,18:66,20:67,60:68,26:69,49:90,12:91,2:$Vk,11:$Vl,32:$Vm,61:$Vn,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,88:$Vv}),o($VA,[2,116]),o($VA,[2,117]),{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:92,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{27:[1,93],39:[1,94]},{14:[2,112],57:$VB,86:$VC,87:$VD},{14:[1,98]},{2:$Vk,11:$Vl,12:99,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($VE,[2,106],{80:[1,100],81:[1,101],82:[1,102],83:[1,103],84:[1,104],85:[1,105]}),o($VF,[2,102],{65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL}),{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:112,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},o($VA,[2,82]),o($VA,[2,83]),o($VA,[2,84]),o($VA,[2,85]),o($VA,[2,86]),o($VA,[2,87]),o($VA,[2,88],{11:$Vg,61:$Vh,77:[1,113],94:$Vi,95:$Vj}),{2:$Vk,11:$Vl,12:114,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($VA,[2,91]),o($VA,[2,92]),o($VA,[2,93]),o($VA,[2,94]),o($VA,[2,95]),o($VM,[2,73],{79:55,64:56,18:66,20:67,60:68,26:69,62:115,12:116,2:$Vk,11:$Vl,32:$Vm,61:$Vn,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,88:$Vv}),{2:$Vk,11:$Vl,12:117,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{2:$Vk,11:$Vl,12:118,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{2:$VN,8:120,9:119,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},{17:123,29:122,32:[1,124],53:[1,125],55:[1,126]},{2:$Vk,11:$Vl,12:127,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vz,[2,48],{47:128,50:129,32:$VO}),{13:[1,131],15:[1,132],86:$VC,87:$VD},{14:[1,133],86:$VC,87:$VD},o($Vf,[2,36]),{30:$Vw,41:134,45:$V7},{2:$VN,8:120,9:135,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($VP,[2,38]),o($VQ,[2,60]),{32:$VR,59:136},{2:$Vk,11:$Vl,12:139,18:66,20:67,26:69,32:$Vm,54:138,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{32:$VS,51:140,89:$VT,90:$VU,91:$VV},{14:$VW,57:$VB,86:$VC,87:$VD},{14:[1,146]},{13:[1,147],15:[1,148]},o($Vz,[2,44],{86:$VC,87:$VD}),{63:[1,149],65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL},{2:$Vk,11:$Vl,12:150,18:66,20:67,26:69,32:$Vm,54:151,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{32:$VS,51:152,89:$VT,90:$VU,91:$VV},{2:$Vk,11:$Vl,12:153,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{2:$Vk,11:$Vl,12:154,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{2:$Vk,11:$Vl,12:155,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vf,[2,58]),o($VE,[2,105]),{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:156},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:157},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:158},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:159},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:160},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:161},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:162,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:163,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:164,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:165,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:166,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{2:$Vk,11:$Vl,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:167,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},o($VA,[2,81]),{78:[1,168]},{13:[1,169],86:$VC,87:$VD},{15:[1,171],63:[1,170]},o($VM,[2,72],{86:$VC,87:$VD}),{13:[1,172],86:$VC,87:$VD},{13:[1,173],86:$VC,87:$VD},{2:$VN,8:175,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,31:[1,174],32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($VX,[2,8]),o($VX,[2,22]),{2:$Vk,11:$Vl,12:176,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($VY,[2,24]),{14:[1,177],27:[1,178]},{32:$VR,58:43,59:45},{32:[1,179]},{13:[1,180],86:$VC,87:$VD},{13:[1,181],15:[1,182]},o($Vz,[2,47]),o($Vz,$VZ,{48:183,39:$V_}),{14:[1,185]},{2:$Vk,11:$Vl,12:186,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vf,[2,21]),o($VP,[2,37]),{2:$VN,8:175,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,31:[1,187],32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($Vx,[2,64]),o($Vx,$Vy,{27:[1,189],39:[1,188]}),{14:[1,190]},o($Vx,$V$,{57:$VB,86:$VC,87:$VD}),o($Vx,$V01,{27:[1,191],61:$V11}),o($V21,[2,107]),o($V21,[2,108]),o($V21,[2,109]),o($V21,[2,111]),o($VQ,[2,61]),o($Vf,[2,57]),o($VA,[2,42]),{2:$Vk,11:$Vl,12:193,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o([13,14,15,27,39,57,63,65,66,67,68,69,70,80,81,82,83,84,85,86,87],[2,74]),{14:$V31,57:$VB,86:$VC,87:$VD},{14:[1,195]},{27:[1,196],61:$V11},o($VE,[2,103]),o([13,14,15,39,57,63,87],[2,104],{86:$VC}),{39:[1,197],86:$VC,87:$VD},o($VF,[2,96]),o($VF,[2,97]),o($VF,[2,98]),o($VF,[2,99]),o($VF,[2,100]),o($VF,[2,101]),o($V41,[2,75],{67:$VI,68:$VJ,69:$VK,70:$VL}),o($V41,[2,76],{67:$VI,68:$VJ,69:$VK,70:$VL}),o($V51,[2,77],{70:$VL}),o($V51,[2,78],{70:$VL}),o($V51,[2,79],{70:$VL}),o($VA,[2,80]),o($VA,[2,89]),o($VA,[2,90]),o($VA,[2,70]),{2:$Vk,11:$Vl,12:198,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{30:[1,199]},{30:[1,200]},{33:[1,201]},o($VX,[2,7]),{14:[1,202],86:$VC,87:$VD},o($VY,[2,25]),{2:$Vk,11:$Vl,12:203,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{27:[1,204],39:[1,205]},{30:[1,206]},{30:$VZ,39:$V_,48:207},{32:$VO,50:208},o($Vz,[2,49]),{32:$VS,51:209,52:[1,210],89:$VT,90:$VU,91:$VV},o($Vf,[2,9]),{13:[1,211],86:$VC,87:$VD},o($Vf,[2,39]),{32:$VS,51:212,89:$VT,90:$VU,91:$VV},{2:$Vk,11:$Vl,12:213,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vf,[2,53]),{2:$Vk,11:$Vl,12:215,18:66,20:67,26:69,32:$Vm,54:214,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{63:[1,216]},o($Vz,[2,43],{86:$VC,87:$VD}),o($VQ,[2,62]),o($Vf,[2,55]),{2:$Vk,11:$Vl,12:217,18:66,20:67,26:69,32:$Vm,54:218,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{2:$Vk,11:$Vl,12:219,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($VM,[2,71],{86:$VC,87:$VD}),{36:220,37:221,38:$V61,40:$V71},{2:$VN,8:120,9:224,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},{11:[1,225]},{20:226,32:[1,227]},{14:$VW,86:$VC,87:$VD},{2:$Vk,11:$Vl,12:228,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{32:$VS,51:229,89:$VT,90:$VU,91:$VV},{2:$VN,8:120,9:230,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},{30:[1,231]},o($Vz,[2,46]),o($V81,[2,50],{61:$V11}),o($V81,[2,51]),{14:[1,232]},o($Vx,$V01,{27:[1,233],61:$V11}),o($Vx,$V$,{86:$VC,87:$VD}),{14:[1,234]},o($Vx,$V91,{57:$VB,86:$VC,87:$VD}),o($V21,[2,110]),{14:$Va1,57:$VB,86:$VC,87:$VD},{14:[1,236]},{14:[2,59],86:$VC,87:$VD},{31:[1,237],37:238,38:$V61,40:$V71},o($Vb1,[2,30]),{2:$Vk,11:$Vl,12:239,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{39:[1,240]},{2:$VN,8:175,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,31:[1,241],32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},{2:$Vk,11:$Vl,12:242,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},{13:[1,243]},{94:$Vi,95:$Vj},{14:$V31,86:$VC,87:$VD},{27:[1,244],61:$V11},{2:$VN,8:175,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,31:[1,245],32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},{2:$VN,8:120,9:246,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($Vf,[2,10]),{2:$Vk,11:$Vl,12:247,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($Vf,[2,54]),o($VQ,[2,63]),o($Vf,[2,56]),o($Vf,[2,28]),o($Vb1,[2,29]),{39:[1,248],86:$VC,87:$VD},{2:$VN,8:120,9:249,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($Vf,[2,26]),{13:[1,250],86:$VC,87:$VD},{30:[1,251]},{2:$Vk,11:$Vl,12:252,18:66,20:67,26:69,32:$Vm,60:68,61:$Vn,64:56,66:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,79:55,88:$Vv},o($VP,[2,40]),{2:$VN,8:175,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,31:[1,253],32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($Vx,$V91,{86:$VC,87:$VD}),{2:$VN,8:120,9:254,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($Vb1,[2,32],{16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,41:20,8:175,2:$VN,10:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd}),{14:[1,255]},{2:$VN,8:120,9:256,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},{14:$Va1,86:$VC,87:$VD},o($Ve,[2,41]),o($Vb1,[2,31],{16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,41:20,8:175,2:$VN,10:$V1,28:$V2,32:$V3,33:$V4,34:$V5,35:$V6,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd}),o($Vf,[2,27]),{2:$VN,8:175,10:$V1,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,28:$V2,31:[1,257],32:$V3,33:$V4,34:$V5,35:$V6,41:20,45:$V7,53:$V9,55:$Va,56:$Vb,92:$Vc,93:$Vd},o($Vf,[2,23])],
defaultActions: {25:[2,114],26:[2,115],32:[2,1],33:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import { TE } from './tabla_errores';
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const { SINTACTOCO, ERLEXICO } = require('./tabla_errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 88; 
break;
case 1: return 65; 
break;
case 2: return 66; 
break;
case 3: return 67; 
break;
case 4: return 68; 
break;
case 5: return 11; 
break;
case 6: return 13; 
break;
case 7: return 30; 
break;
case 8: return 31; 
break;
case 9: return 14; 
break;
case 10: return 80; 
break;
case 11: return 81; 
break;
case 12: return 82; 
break;
case 13: return 83; 
break;
case 14: return 27; 
break;
case 15: return 84; 
break;
case 16: return 85; 
break;
case 17: return 69; 
break;
case 18: return 70; 
break;
case 19: return 77; 
break;
case 20: return 39; 
break;
case 21: return 15; 
break;
case 22: return 86; 
break;
case 23: return 87; 
break;
case 24: return 94; 
break;
case 25: return 95; 
break;
case 26: return 57; 
break;
case 27: return 61; 
break;
case 28: return 63; 
break;
case 29: return 34; 
break;
case 30: return 89; 
break;
case 31: return 90; 
break;
case 32: return 91; 
break;
case 33: return 45; 
break;
case 34: return 44; 
break;
case 35: return 10; 
break;
case 36: return 53; 
break;
case 37: return 55; 
break;
case 38: return 46; 
break;
case 39: return 52; 
break;
case 40: return 56; 
break;
case 41: return 93; 
break;
case 42: return 92; 
break;
case 43: return 35; 
break;
case 44: return 38; 
break;
case 45: return 33; 
break;
case 46: return 28; 
break;
case 47: return 40; 
break;
case 48: return 78; 
break;
case 49: return 76; 
break;
case 50: return 72; 
break;
case 51: return 71; 
break;
case 52: return 32; 
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 73; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 74; 
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 56:/* skip whitespace */
break;
case 57:// comentario simple l√≠nea
break;
case 58:// comentario multiple l√≠neas
break;
case 59: 
break;
case 60: 
break;
case 61:return 5 //fin de cadena
break;
case 62: 	console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
				new ERLEXICO('Este es un error l√©xico', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
			
break;
case 63:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(!))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(;))/,/^(?:(>))/,/^(?:(<))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(=))/,/^(?:(==))/,/^(?:(!=))/,/^(?:(%))/,/^(?:(\*\*))/,/^(?:(\.))/,/^(?:(:))/,/^(?:(,))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(\+\+))/,/^(?:(--))/,/^(?:(\?))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(do))/,/^(?:(string))/,/^(?:(number))/,/^(?:(boolean))/,/^(?:(if))/,/^(?:(else))/,/^(?:(console\.log))/,/^(?:(let))/,/^(?:(const))/,/^(?:(function))/,/^(?:(void))/,/^(?:(return))/,/^(?:(continue))/,/^(?:(break))/,/^(?:(switch))/,/^(?:(case))/,/^(?:(while))/,/^(?:(for))/,/^(?:(default))/,/^(?:(length))/,/^(?:(true|false))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:("[^\"]*"))/,/^(?:('[^\']*'))/,/^(?:(`[^\`]*`))/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\\t)/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}