/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,7],$V2=[1,20],$V3=[1,25],$V4=[1,33],$V5=[1,31],$V6=[1,32],$V7=[1,30],$V8=[1,34],$V9=[1,6],$Va=[1,24],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[2,5,10,28,31,35,39,40,41,51,52,59,61,62,97,98],$Vg=[2,5,10,28,31,35,38,39,40,41,44,46,51,52,59,61,62,97,98],$Vh=[1,52],$Vi=[1,56],$Vj=[1,53],$Vk=[1,54],$Vl=[1,78],$Vm=[1,71],$Vn=[1,70],$Vo=[1,79],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,60],$Vx=[1,91],$Vy=[14,15],$Vz=[2,70],$VA=[13,15],$VB=[13,14,15,45,63,69,71,72,73,74,75,76,85,86,87,88,89,90,91,92],$VC=[1,101],$VD=[1,108],$VE=[1,106],$VF=[1,107],$VG=[13,14,15,45,63,69,91,92],$VH=[13,14,15,45,63,69,85,86,87,88,89,90,91,92],$VI=[1,117],$VJ=[1,118],$VK=[1,119],$VL=[1,120],$VM=[1,121],$VN=[1,122],$VO=[15,69],$VP=[1,140],$VQ=[2,5,10,28,31,35,38,39,40,41,44,46,50,51,52,59,61,62,97,98],$VR=[2,5,10,11,28,31,35,38,39,40,41,44,46,51,52,59,61,62,67,72,77,78,79,80,81,82,93,97,98],$VS=[1,148],$VT=[1,155],$VU=[1,152],$VV=[1,153],$VW=[1,154],$VX=[1,156],$VY=[2,10,28,31,35,38,39,40,41,44,46,51,59,61,62,97,98],$VZ=[2,11,31,67,72,77,78,79,80,81,82,93],$V_=[2,56],$V$=[1,197],$V01=[2,72],$V11=[2,71],$V21=[1,205],$V31=[13,14,15,30,37,67],$V41=[1,209],$V51=[13,14,15,45,63,69,71,72,85,86,87,88,89,90,91,92],$V61=[13,14,15,45,63,69,71,72,73,74,75,85,86,87,88,89,90,91,92],$V71=[1,238],$V81=[1,239],$V91=[13,15,37],$Va1=[2,73],$Vb1=[1,252],$Vc1=[38,44,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"CUERPO":4,"EOF":5,"INSTRUCCION":6,"FUNCION":7,"SENTENCIA":8,"LSENTENCIA":9,"timprimir":10,"parA":11,"EXP_LOGICA":12,"parC":13,"ptcoma":14,"coma":15,"SENTENCIA_IF":16,"VARIABLES":17,"LLAMADA":18,"TRANSFERENCIA":19,"MASMAS_MENOSMENOS":20,"SWITCH":21,"INS_WHILE":22,"INS_DOWHILE":23,"INS_FOR":24,"OPERADOR_TERNARIO":25,"MIPOP":26,"MIPUSH":27,"tGraficar_ts":28,"ACCESOARRAY":29,"igual":30,"identificador":31,"punto":32,"tPush":33,"tPop":34,"tFor":35,"DECLARACION_FOR":36,"llaveA":37,"llaveC":38,"tWhile":39,"tDo":40,"tSwitch":41,"CASOS":42,"CASO_EVALUAR":43,"tCase":44,"dospt":45,"tDefault":46,"IF":47,"ELSE":48,"ELSEIF":49,"tElse":50,"tif":51,"tFunction":52,"PARAM_FUN":53,"TIPO_DATO":54,"PARAM_LLAMADA":55,"PARAM":56,"TIPO_VARIABLE":57,"tVoid":58,"tLet":59,"TERNARIO":60,"tConst":61,"tReturn":62,"interrogacionC":63,"LISTA_ID":64,"IDENT":65,"ASIGARRAY":66,"corchA":67,"LISEXP":68,"corchC":69,"EXP":70,"mas":71,"menos":72,"por":73,"div":74,"modular":75,"exponente":76,"entero":77,"decimal":78,"cadena1":79,"cadena2":80,"cadena3":81,"booleano":82,"LENGTHARRAY":83,"EXP_RELACIONAL":84,"mayque":85,"menque":86,"mayigque":87,"menigque":88,"igig":89,"noig":90,"and":91,"or":92,"not":93,"tString":94,"tNumber":95,"tBoolean":96,"tBreak":97,"tContinue":98,"masmas":99,"menosmenos":100,"tLength":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"timprimir",11:"parA",13:"parC",14:"ptcoma",15:"coma",28:"tGraficar_ts",30:"igual",31:"identificador",32:"punto",33:"tPush",34:"tPop",35:"tFor",37:"llaveA",38:"llaveC",39:"tWhile",40:"tDo",41:"tSwitch",44:"tCase",45:"dospt",46:"tDefault",50:"tElse",51:"tif",52:"tFunction",58:"tVoid",59:"tLet",61:"tConst",62:"tReturn",63:"interrogacionC",67:"corchA",69:"corchC",71:"mas",72:"menos",73:"por",74:"div",75:"modular",76:"exponente",77:"entero",78:"decimal",79:"cadena1",80:"cadena2",81:"cadena3",82:"booleano",85:"mayque",86:"menque",87:"mayigque",88:"menigque",89:"igig",90:"noig",91:"and",92:"or",93:"not",94:"tString",95:"tNumber",96:"tBoolean",97:"tBreak",98:"tContinue",99:"masmas",100:"menosmenos",101:"tLength"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,2],[9,1],[8,5],[8,7],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,1],[8,4],[8,4],[8,1],[27,7],[26,5],[24,10],[36,1],[36,2],[22,7],[23,9],[21,7],[42,2],[42,1],[43,4],[43,3],[16,1],[16,2],[16,2],[16,3],[49,3],[49,2],[48,4],[47,7],[7,9],[18,4],[55,3],[55,1],[55,0],[53,3],[53,1],[53,0],[56,2],[54,2],[54,2],[54,0],[25,5],[25,7],[25,5],[25,7],[25,4],[25,3],[60,5],[17,3],[17,4],[17,5],[17,7],[64,3],[64,1],[65,1],[65,3],[65,3],[65,5],[66,3],[68,3],[68,1],[68,0],[29,4],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,2],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,3],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,1],[12,3],[12,3],[12,2],[12,1],[57,1],[57,1],[57,1],[57,3],[57,1],[19,2],[19,1],[19,1],[19,1],[20,2],[20,2],[83,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-2], pila[pila.length-1]);
							
break;
case 3:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-1], undefined);
							
break;
case 4: case 10: case 11: case 15: case 16: case 17: case 18: case 19: case 21: case 28: case 37: case 54: case 94: case 95: case 96: case 98: case 99: case 107: case 111: case 116:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = {tipo: "INSTRUCCIONES", instruccion: [$$[$0]] } 
break;
case 6: case 33:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 42: case 48: case 51: case 69: case 76:
 this.$ = [$$[$0]]; 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 9:
 this.$ = instruccionesAPI.nuevoImprimirArray($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 12: case 13: case 14: case 20: case 43: case 74: case 93:
 this.$ = $$[$0-1]; 
break;
case 22:
 this.$ = instruccionesAPI.nuevoGraficarTS(); 
break;
case 23:
 this.$ = instruccionesAPI.nuevoValorArray($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 24:
 //console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
					new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column);
				
break;
case 25:
 this.$ = instruccionesAPI.nuevoPush($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ = instruccionesAPI.nuevoPop($$[$0-4], this._$.first_line, this._$.first_column); 
break;
case 27:
 this.$ = instruccionesAPI.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 29:
 this.$ = instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 34:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 35:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0], this._$.first_line, this._$.first_column); 
break;
case 38:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-1], $$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 40:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 41: case 47: case 50: case 68: case 75:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 44:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoFuncion($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);	
break;
case 46:
 this.$ = instruccionesAPI.nuevoLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 53:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 55:
 this.$ = TIPO_DATO.VOID; 
break;
case 57: case 59: case 66:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-4], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-3], undefined, $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 58: case 60: case 67:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-6], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 61: case 65:
 this.$ = instruccionesAPI.nuevoVariable(undefined, [instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 63:
 this.$ = instruccionesAPI.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-2], $$[$0-1]); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-2], undefined, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoAcceso($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 79:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column); 
break;
case 81:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 83:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULAR, this._$.first_line, this._$.first_column); 
break;
case 84:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.EXPONENTE, this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column); 
break;
case 86: case 87:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO, this._$.first_line, this._$.first_column); 
break;
case 88: case 89: case 90:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column); 
break;
case 91:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 92:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 97:
 this.$ = instruccionesAPI.nuevoAsigVec($$[$0]); 
break;
case 100:
 new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column); 
break;
case 101:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 102:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 103:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 104:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 105:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 106:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 108:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column); 
break;
case 109:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column); 
break;
case 110:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column); 
break;
case 112:
 this.$ = TIPO_DATO.STRING; 
break;
case 113:
 this.$ = TIPO_DATO.NUMERO; 
break;
case 114:
 this.$ = TIPO_DATO.BOOLEANO; 
break;
case 115:
 this.$= $$[$0-2]; 
break;
case 117:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 118: case 119: case 120:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 121:
 this.$ = instruccionesAPI.nuevoMasmas($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 122:
 this.$ = instruccionesAPI.nuevoMenosmenos($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 123:
 this.$ = instruccionesAPI.nuevoLength($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,52:$V9,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},{1:[3]},{5:[1,35]},{2:$V0,4:36,5:[2,3],6:3,7:4,8:5,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,52:$V9,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($Vf,[2,4]),o($Vf,[2,5]),{31:[1,37]},{11:[1,38]},o($Vg,[2,10]),o($Vg,[2,11]),{14:[1,39]},{14:[1,40]},{14:[1,41]},o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),{14:[1,42]},o($Vg,[2,21]),{11:[1,43]},{30:[1,44]},o($Vg,[2,24]),o($Vg,[2,37],{48:45,49:46,50:[1,47]}),{31:[1,49],64:48,65:50},{11:$Vh,30:[1,51],32:[1,55],67:$Vi,99:$Vj,100:$Vk},{31:[1,57]},{2:$Vl,11:$Vm,12:58,14:[2,118],18:72,20:74,26:77,29:76,31:$Vn,60:59,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{14:[2,119]},{14:[2,120]},{11:[1,80]},{11:[1,81]},{37:[1,82]},{11:[1,83]},{11:[1,84]},{1:[2,1]},{5:[2,2]},{11:[1,85]},{2:$Vl,11:$Vm,12:86,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,20]),{13:[1,87]},{2:$Vl,11:$Vm,12:88,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($Vg,[2,38]),o($Vg,[2,39],{48:89,50:[1,90]}),{37:$Vx,47:92,51:$V8},{14:[1,93],15:[1,94]},o($Vy,$Vz,{30:[1,95],45:[1,96]}),o($Vy,[2,69]),{2:$Vl,11:$Vm,12:97,18:72,20:74,26:77,29:76,31:$Vn,60:98,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($VA,[2,49],{84:61,70:62,18:72,83:73,20:74,66:75,29:76,26:77,55:99,12:100,2:$Vl,11:$Vm,31:$Vn,67:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,93:$Vw}),o($VB,[2,121]),o($VB,[2,122]),{33:[1,102],34:$VC},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:103,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},{30:[1,104],45:[1,105]},{14:[2,117],63:$VD,91:$VE,92:$VF},{14:[1,109]},{2:$Vl,11:$Vm,12:110,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($VG,[2,111],{85:[1,111],86:[1,112],87:[1,113],88:[1,114],89:[1,115],90:[1,116]}),o($VH,[2,107],{71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:123,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},o($VB,[2,86]),o($VB,[2,87]),o($VB,[2,88]),o($VB,[2,89]),o($VB,[2,90]),o($VB,[2,91]),o($VB,[2,92],{11:$Vh,32:[1,124],67:$Vi,99:$Vj,100:$Vk}),{2:$Vl,11:$Vm,12:125,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($VB,[2,94]),o($VB,[2,95]),o($VB,[2,96]),o($VB,[2,97]),o($VB,[2,98]),o($VB,[2,99]),o($VB,[2,100]),o($VO,[2,77],{84:61,70:62,18:72,83:73,20:74,66:75,29:76,26:77,68:126,12:127,2:$Vl,11:$Vm,31:$Vn,67:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,93:$Vw}),{2:$Vl,11:$Vm,12:128,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{2:$Vl,11:$Vm,12:129,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{2:$V0,8:131,9:130,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},{17:133,31:[1,134],36:132,59:[1,135],61:[1,136]},{2:$Vl,11:$Vm,12:137,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($VA,[2,52],{53:138,56:139,31:$VP}),{13:[1,141],15:[1,142],91:$VE,92:$VF},{14:[1,143]},{14:[1,144],91:$VE,92:$VF},o($Vg,[2,40]),{37:$Vx,47:145,51:$V8},{2:$V0,8:131,9:146,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($VQ,[2,42]),o($VR,[2,64]),{31:$VS,65:147},{2:$Vl,11:$Vm,12:150,18:72,20:74,26:77,29:76,31:$Vn,60:149,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{31:$VT,57:151,94:$VU,95:$VV,96:$VW},{14:$VX,63:$VD,91:$VE,92:$VF},{14:[1,157]},{13:[1,158],15:[1,159]},o($VA,[2,48],{91:$VE,92:$VF}),{11:[1,160]},{11:[1,161]},{69:[1,162],71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN},{2:$Vl,11:$Vm,12:163,18:72,20:74,26:77,29:76,31:$Vn,60:164,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{31:$VT,57:165,94:$VU,95:$VV,96:$VW},{2:$Vl,11:$Vm,12:166,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{2:$Vl,11:$Vm,12:167,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{2:$Vl,11:$Vm,12:168,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($Vg,[2,62]),o($VG,[2,110]),{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:169},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:170},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:171},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:172},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:173},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:174},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:175,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:176,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:177,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:178,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:179,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},{2:$Vl,11:$Vm,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:180,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73},o($VB,[2,85]),{34:$VC,101:[1,181]},{13:[1,182],91:$VE,92:$VF},{15:[1,184],69:[1,183]},o($VO,[2,76],{91:$VE,92:$VF}),{13:[1,185],91:$VE,92:$VF},{13:[1,186],91:$VE,92:$VF},{2:$V0,8:188,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,38:[1,187],39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($VY,[2,7]),{2:$Vl,11:$Vm,12:189,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($VZ,[2,28]),{14:[1,190],30:[1,191]},{31:$VS,64:48,65:50},{31:[1,192]},{13:[1,193],91:$VE,92:$VF},{13:[1,194],15:[1,195]},o($VA,[2,51]),o($VA,$V_,{54:196,45:$V$}),{14:[1,198]},{2:$Vl,11:$Vm,12:199,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($Vg,[2,22]),o($Vg,[2,23]),o($VQ,[2,41]),{2:$V0,8:188,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,38:[1,200],39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($Vy,[2,68]),o($Vy,$Vz,{30:[1,202],45:[1,201]}),{14:[1,203]},o($Vy,$V01,{63:$VD,91:$VE,92:$VF}),o($Vy,$V11,{30:[1,204],67:$V21}),o($V31,[2,112]),o($V31,[2,113]),o($V31,[2,114]),o($V31,[2,116]),o($VR,[2,65]),o($Vg,[2,61]),o($VB,[2,46]),{2:$Vl,11:$Vm,12:206,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{13:[1,207]},{2:$Vl,11:$Vm,12:208,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o([13,14,15,30,45,63,69,71,72,73,74,75,76,85,86,87,88,89,90,91,92],[2,78]),{14:$V41,63:$VD,91:$VE,92:$VF},{14:[1,210]},{30:[1,211],67:$V21},o($VG,[2,108]),o([13,14,15,45,63,69,92],[2,109],{91:$VE}),{45:[1,212],91:$VE,92:$VF},o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),o($VH,[2,104]),o($VH,[2,105]),o($VH,[2,106]),o($V51,[2,79],{73:$VK,74:$VL,75:$VM,76:$VN}),o($V51,[2,80],{73:$VK,74:$VL,75:$VM,76:$VN}),o($V61,[2,81],{76:$VN}),o($V61,[2,82],{76:$VN}),o($V61,[2,83],{76:$VN}),o($VB,[2,84]),o($VB,[2,123]),o($VB,[2,93]),o($VB,[2,74]),{2:$Vl,11:$Vm,12:213,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{37:[1,214]},{37:[1,215]},{39:[1,216]},o($VY,[2,6]),{14:[1,217],91:$VE,92:$VF},o($VZ,[2,29]),{2:$Vl,11:$Vm,12:218,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{30:[1,219],45:[1,220]},{37:[1,221]},{37:$V_,45:$V$,54:222},{31:$VP,56:223},o($VA,[2,53]),{31:$VT,57:224,58:[1,225],94:$VU,95:$VV,96:$VW},o($Vg,[2,8]),{13:[1,226],91:$VE,92:$VF},o($Vg,[2,43]),{31:$VT,57:227,94:$VU,95:$VV,96:$VW},{2:$Vl,11:$Vm,12:228,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($Vg,[2,57]),{2:$Vl,11:$Vm,12:230,18:72,20:74,26:77,29:76,31:$Vn,60:229,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{69:[1,231]},o($VA,[2,47],{91:$VE,92:$VF}),o($VB,[2,26]),{13:[1,232],91:$VE,92:$VF},o($VR,[2,66]),o($Vg,[2,59]),{2:$Vl,11:$Vm,12:233,18:72,20:74,26:77,29:76,31:$Vn,60:234,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{2:$Vl,11:$Vm,12:235,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($VO,[2,75],{91:$VE,92:$VF}),{42:236,43:237,44:$V71,46:$V81},{2:$V0,8:131,9:240,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},{11:[1,241]},{20:242,31:[1,243]},{14:$VX,91:$VE,92:$VF},{2:$Vl,11:$Vm,12:244,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{31:$VT,57:245,94:$VU,95:$VV,96:$VW},{2:$V0,8:131,9:246,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},{37:[1,247]},o($VA,[2,50]),o($V91,[2,54],{67:$V21}),o($V91,[2,55]),{14:[1,248]},o($Vy,$V11,{30:[1,249],67:$V21}),o($Vy,$V01,{91:$VE,92:$VF}),{14:[1,250]},o($Vy,$Va1,{63:$VD,91:$VE,92:$VF}),o($V31,[2,115]),{14:[1,251]},{14:$Vb1,63:$VD,91:$VE,92:$VF},{14:[1,253]},{14:[2,63],91:$VE,92:$VF},{38:[1,254],43:255,44:$V71,46:$V81},o($Vc1,[2,34]),{2:$Vl,11:$Vm,12:256,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{45:[1,257]},{2:$V0,8:188,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,38:[1,258],39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},{2:$Vl,11:$Vm,12:259,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},{13:[1,260]},{99:$Vj,100:$Vk},{14:$V41,91:$VE,92:$VF},{30:[1,261],67:$V21},{2:$V0,8:188,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,38:[1,262],39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},{2:$V0,8:131,9:263,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($Vg,[2,9]),{2:$Vl,11:$Vm,12:264,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($Vg,[2,58]),o($Vg,[2,25]),o($VR,[2,67]),o($Vg,[2,60]),o($Vg,[2,32]),o($Vc1,[2,33]),{45:[1,265],91:$VE,92:$VF},{2:$V0,8:131,9:266,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($Vg,[2,30]),{13:[1,267],91:$VE,92:$VF},{37:[1,268]},{2:$Vl,11:$Vm,12:269,18:72,20:74,26:77,29:76,31:$Vn,66:75,67:$Vo,70:62,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:73,84:61,93:$Vw},o($VQ,[2,44]),{2:$V0,8:188,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,38:[1,270],39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($Vy,$Va1,{91:$VE,92:$VF}),{2:$V0,8:131,9:271,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($Vc1,[2,36],{16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,29:21,47:23,8:188,2:$V0,10:$V1,28:$V2,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve}),{14:[1,272]},{2:$V0,8:131,9:273,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},{14:$Vb1,91:$VE,92:$VF},o($Vf,[2,45]),o($Vc1,[2,35],{16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,29:21,47:23,8:188,2:$V0,10:$V1,28:$V2,31:$V3,35:$V4,39:$V5,40:$V6,41:$V7,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve}),o($Vg,[2,31]),{2:$V0,8:188,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V2,29:21,31:$V3,35:$V4,38:[1,274],39:$V5,40:$V6,41:$V7,47:23,51:$V8,59:$Va,61:$Vb,62:$Vc,97:$Vd,98:$Ve},o($Vg,[2,27])],
defaultActions: {28:[2,119],29:[2,120],35:[2,1],36:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import { TE } from './tabla_errores';
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const { SINTACTOCO, ERLEXICO } = require('./tabla_errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 93; 
break;
case 1: return 71; 
break;
case 2: return 72; 
break;
case 3: return 73; 
break;
case 4: return 74; 
break;
case 5: return 11; 
break;
case 6: return 13; 
break;
case 7: return 37; 
break;
case 8: return 38; 
break;
case 9: return 14; 
break;
case 10: return 85; 
break;
case 11: return 86; 
break;
case 12: return 87; 
break;
case 13: return 88; 
break;
case 14: return 30; 
break;
case 15: return 89; 
break;
case 16: return 90; 
break;
case 17: return 75; 
break;
case 18: return 76; 
break;
case 19: return 32; 
break;
case 20: return 45; 
break;
case 21: return 15; 
break;
case 22: return 91; 
break;
case 23: return 92; 
break;
case 24: return 99; 
break;
case 25: return 100; 
break;
case 26: return 63; 
break;
case 27: return 67; 
break;
case 28: return 69; 
break;
case 29: return 40; 
break;
case 30: return 94; 
break;
case 31: return 95; 
break;
case 32: return 96; 
break;
case 33: return 51; 
break;
case 34: return 50; 
break;
case 35: return 10; 
break;
case 36: return 59; 
break;
case 37: return 61; 
break;
case 38: return 52; 
break;
case 39: return 58; 
break;
case 40: return 62; 
break;
case 41: return 98; 
break;
case 42: return 97; 
break;
case 43: return 41; 
break;
case 44: return 44; 
break;
case 45: return 39; 
break;
case 46: return 35; 
break;
case 47: return 46; 
break;
case 48: return 101; 
break;
case 49: return 28; 
break;
case 50: return 34; 
break;
case 51: return 33; 
break;
case 52: return 82; 
break;
case 53: return 78; 
break;
case 54: return 77; 
break;
case 55: return 31; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 79; 
break;
case 57: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 59:/* skip whitespace */
break;
case 60:// comentario simple l√≠nea
break;
case 61:// comentario multiple l√≠neas
break;
case 62: 
break;
case 63: 
break;
case 64:return 5 //fin de cadena
break;
case 65: 	console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
				new ERLEXICO('Este es un error l√©xico', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
			
break;
case 66:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(!))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(;))/,/^(?:(>))/,/^(?:(<))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(=))/,/^(?:(==))/,/^(?:(!=))/,/^(?:(%))/,/^(?:(\*\*))/,/^(?:(\.))/,/^(?:(:))/,/^(?:(,))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(\+\+))/,/^(?:(--))/,/^(?:(\?))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(do))/,/^(?:(string))/,/^(?:(number))/,/^(?:(boolean))/,/^(?:(if))/,/^(?:(else))/,/^(?:(console\.log))/,/^(?:(let))/,/^(?:(const))/,/^(?:(function))/,/^(?:(void))/,/^(?:(return))/,/^(?:(continue))/,/^(?:(break))/,/^(?:(switch))/,/^(?:(case))/,/^(?:(while))/,/^(?:(for))/,/^(?:(default))/,/^(?:(length))/,/^(?:(graficar_ts))/,/^(?:(pop))/,/^(?:(push))/,/^(?:(true|false))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:("[^\"]*"))/,/^(?:('[^\']*'))/,/^(?:(`[^\`]*`))/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\\t)/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}