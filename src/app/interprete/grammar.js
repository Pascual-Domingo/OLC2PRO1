/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,7],$V2=[1,21],$V3=[1,34],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,32],$V8=[1,33],$V9=[1,31],$Va=[1,35],$Vb=[1,6],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[2,5,10,29,32,33,34,38,44,45,46,56,57,65,100,101],$Vg=[2,5,10,29,32,33,34,37,38,44,45,46,49,51,56,57,65,100,101],$Vh=[1,53],$Vi=[1,57],$Vj=[1,54],$Vk=[1,55],$Vl=[1,79],$Vm=[1,72],$Vn=[1,71],$Vo=[1,80],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,61],$Vx=[1,92],$Vy=[14,15],$Vz=[2,75],$VA=[13,15],$VB=[13,14,15,50,66,72,74,75,76,77,78,79,88,89,90,91,92,93,94,95],$VC=[1,102],$VD=[1,109],$VE=[1,107],$VF=[1,108],$VG=[13,14,15,50,66,72,94,95],$VH=[13,14,15,50,66,72,88,89,90,91,92,93,94,95],$VI=[1,118],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[1,123],$VO=[15,72],$VP=[1,141],$VQ=[2,5,10,29,32,33,34,37,38,44,45,46,49,51,55,56,57,65,100,101],$VR=[2,5,10,11,29,32,33,34,37,38,44,45,46,49,51,56,57,65,70,75,80,81,82,83,84,85,96,100,101],$VS=[1,156],$VT=[1,153],$VU=[1,154],$VV=[1,155],$VW=[1,157],$VX=[2,10,29,32,33,34,37,38,44,45,46,49,51,56,65,100,101],$VY=[2,11,34,70,75,80,81,82,83,84,85,96],$VZ=[2,61],$V_=[1,199],$V$=[1,204],$V01=[1,203],$V11=[2,77],$V21=[2,76],$V31=[1,207],$V41=[13,14,15,31,36,70],$V51=[1,211],$V61=[13,14,15,50,66,72,74,75,88,89,90,91,92,93,94,95],$V71=[13,14,15,50,66,72,74,75,76,77,78,88,89,90,91,92,93,94,95],$V81=[1,244],$V91=[1,245],$Va1=[13,15,36],$Vb1=[2,78],$Vc1=[1,262],$Vd1=[37,49,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"CUERPO":4,"EOF":5,"INSTRUCCION":6,"FUNCION":7,"SENTENCIA":8,"LSENTENCIA":9,"timprimir":10,"parA":11,"EXP_LOGICA":12,"parC":13,"ptcoma":14,"coma":15,"SENTENCIA_IF":16,"VARIABLES":17,"LLAMADA":18,"TRANSFERENCIA":19,"MASMAS_MENOSMENOS":20,"SWITCH":21,"INS_WHILE":22,"INS_DOWHILE":23,"INS_FOR":24,"FOROF":25,"OPERADOR_TERNARIO":26,"MIPOP":27,"MIPUSH":28,"tGraficar_ts":29,"ACCESOARRAY":30,"igual":31,"tFor":32,"tLet":33,"identificador":34,"tOf":35,"llaveA":36,"llaveC":37,"tConst":38,"tIn":39,"punto":40,"tPush":41,"tPop":42,"DECLARACION_FOR":43,"tWhile":44,"tDo":45,"tSwitch":46,"CASOS":47,"CASO_EVALUAR":48,"tCase":49,"dospt":50,"tDefault":51,"IF":52,"ELSE":53,"ELSEIF":54,"tElse":55,"tif":56,"tFunction":57,"PARAM_FUN":58,"TIPO_DATO":59,"PARAM_LLAMADA":60,"PARAM":61,"TIPO_VARIABLE":62,"tVoid":63,"TERNARIO":64,"tReturn":65,"interrogacionC":66,"LISTA_ID":67,"IDENT":68,"ASIGARRAY":69,"corchA":70,"LISEXP":71,"corchC":72,"EXP":73,"mas":74,"menos":75,"por":76,"div":77,"modular":78,"exponente":79,"entero":80,"decimal":81,"cadena1":82,"cadena2":83,"cadena3":84,"booleano":85,"LENGTHARRAY":86,"EXP_RELACIONAL":87,"mayque":88,"menque":89,"mayigque":90,"menigque":91,"igig":92,"noig":93,"and":94,"or":95,"not":96,"tString":97,"tNumber":98,"tBoolean":99,"tBreak":100,"tContinue":101,"masmas":102,"menosmenos":103,"tLength":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"timprimir",11:"parA",13:"parC",14:"ptcoma",15:"coma",29:"tGraficar_ts",31:"igual",32:"tFor",33:"tLet",34:"identificador",35:"tOf",36:"llaveA",37:"llaveC",38:"tConst",39:"tIn",40:"punto",41:"tPush",42:"tPop",44:"tWhile",45:"tDo",46:"tSwitch",49:"tCase",50:"dospt",51:"tDefault",55:"tElse",56:"tif",57:"tFunction",63:"tVoid",65:"tReturn",66:"interrogacionC",70:"corchA",72:"corchC",74:"mas",75:"menos",76:"por",77:"div",78:"modular",79:"exponente",80:"entero",81:"decimal",82:"cadena1",83:"cadena2",84:"cadena3",85:"booleano",88:"mayque",89:"menque",90:"mayigque",91:"menigque",92:"igig",93:"noig",94:"and",95:"or",96:"not",97:"tString",98:"tNumber",99:"tBoolean",100:"tBreak",101:"tContinue",102:"masmas",103:"menosmenos",104:"tLength"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,2],[9,1],[8,5],[8,7],[8,1],[8,1],[8,2],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,1],[8,4],[8,4],[8,1],[25,10],[25,10],[25,10],[25,10],[28,7],[27,5],[24,10],[43,1],[43,2],[22,7],[23,9],[21,7],[47,2],[47,1],[48,4],[48,3],[16,1],[16,2],[16,2],[16,3],[54,3],[54,2],[53,4],[52,7],[7,9],[18,4],[60,3],[60,1],[60,0],[58,3],[58,1],[58,0],[61,2],[59,2],[59,2],[59,0],[26,5],[26,7],[26,5],[26,7],[26,4],[26,3],[64,5],[17,3],[17,4],[17,5],[17,7],[67,3],[67,1],[68,1],[68,3],[68,3],[68,5],[69,3],[71,3],[71,1],[71,0],[30,4],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,3],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,1],[12,3],[12,3],[12,2],[12,1],[62,1],[62,1],[62,1],[62,3],[62,1],[19,2],[19,1],[19,1],[19,1],[20,2],[20,2],[86,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-2], pila[pila.length-1]);
							
break;
case 3:

								var pila = eval('$$');
								this.$ = instruccionesAPI.nuevoCuerpo(pila[pila.length-1], undefined);
							
break;
case 4: case 10: case 11: case 15: case 16: case 17: case 18: case 19: case 20: case 22: case 33: case 42: case 59: case 99: case 100: case 101: case 103: case 104: case 112: case 116: case 121:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = {tipo: "INSTRUCCIONES", instruccion: [$$[$0]] } 
break;
case 6: case 38:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 47: case 53: case 56: case 74: case 81:
 this.$ = [$$[$0]]; 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImprimir($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 9:
 this.$ = instruccionesAPI.nuevoImprimirArray($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column ); 
break;
case 12: case 13: case 14: case 21: case 48: case 79: case 98:
 this.$ = $$[$0-1]; 
break;
case 23:
 this.$ = instruccionesAPI.nuevoGraficarTS(); 
break;
case 24:
 this.$ = instruccionesAPI.nuevoValorArray($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 25:
 //console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
					new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column);
				
break;
case 26: case 27:
 this.$ = instruccionesAPI.nuevoForOf($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 28: case 29:
 this.$ = instruccionesAPI.nuevoForIN($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = instruccionesAPI.nuevoPush($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = instruccionesAPI.nuevoPop($$[$0-4], this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = instruccionesAPI.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 34:
 this.$ = instruccionesAPI.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 35:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 40:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0], this._$.first_line, this._$.first_column); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 44:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-1], $$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoElseIf($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 46: case 52: case 55: case 73: case 80:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 49:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 50:
 this.$ = instruccionesAPI.nuevoFuncion($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);	
break;
case 51:
 this.$ = instruccionesAPI.nuevoLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 58:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-1], $$[$0], this._$.first_line, this._$.first_column ); 
break;
case 60:
 this.$ = TIPO_DATO.VOID; 
break;
case 62: case 64: case 71:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-4], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-3], undefined, $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 63: case 65: case 72:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-6], [instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-5], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 66: case 70:
 this.$ = instruccionesAPI.nuevoVariable(undefined, [instruccionesAPI.nuevoAsignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column)]); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoVariable($$[$0-2], $$[$0-1]); 
break;
case 75:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 76:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-2], undefined, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = instruccionesAPI.nuevoDeclaracionAsignacion($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 83:
 this.$ = instruccionesAPI.nuevoAcceso($$[$0-3], $$[$0-1], this._$.first_line , this._$.first_column); 
break;
case 84:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column); 
break;
case 87:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULAR, this._$.first_line, this._$.first_column); 
break;
case 89:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.EXPONENTE, this._$.first_line, this._$.first_column); 
break;
case 90:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line, this._$.first_column); 
break;
case 91: case 92:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO, this._$.first_line, this._$.first_column); 
break;
case 93: case 94: case 95:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line, this._$.first_column); 
break;
case 96:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 97:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column); 
break;
case 102:
 this.$ = instruccionesAPI.nuevoAsigVec($$[$0]); 
break;
case 105:
 new SINTACTOCO("este es un error sintactico", yytext, this._$.first_line , this._$.first_column); 
break;
case 106:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 107:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE, this._$.first_line, this._$.first_column); 
break;
case 108:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 109:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 110:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 111:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL, this._$.first_line, this._$.first_column); 
break;
case 113:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND, this._$.first_line, this._$.first_column); 
break;
case 114:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR, this._$.first_line, this._$.first_column); 
break;
case 115:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column); 
break;
case 117:
 this.$ = TIPO_DATO.STRING; 
break;
case 118:
 this.$ = TIPO_DATO.NUMERO; 
break;
case 119:
 this.$ = TIPO_DATO.BOOLEANO; 
break;
case 120:
 this.$= $$[$0-2]; 
break;
case 122:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 123: case 124: case 125:
 this.$ = instruccionesAPI.nuevoTransferencia($$[$0], undefined, this._$.first_line, this._$.first_column); 
break;
case 126:
 this.$ = instruccionesAPI.nuevoMasmas($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 127:
 this.$ = instruccionesAPI.nuevoMenosmenos($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 128:
 this.$ = instruccionesAPI.nuevoLength($$[$0-2], this._$.first_line, this._$.first_column ); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,57:$Vb,65:$Vc,100:$Vd,101:$Ve},{1:[3]},{5:[1,36]},{2:$V0,4:37,5:[2,3],6:3,7:4,8:5,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,57:$Vb,65:$Vc,100:$Vd,101:$Ve},o($Vf,[2,4]),o($Vf,[2,5]),{34:[1,38]},{11:[1,39]},o($Vg,[2,10]),o($Vg,[2,11]),{14:[1,40]},{14:[1,41]},{14:[1,42]},o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{14:[1,43]},o($Vg,[2,22]),{11:[1,44]},{31:[1,45]},o($Vg,[2,25]),o($Vg,[2,42],{53:46,54:47,55:[1,48]}),{34:[1,50],67:49,68:51},{11:$Vh,31:[1,52],40:[1,56],70:$Vi,102:$Vj,103:$Vk},{34:[1,58]},{2:$Vl,11:$Vm,12:59,14:[2,123],18:73,20:75,27:78,30:77,34:$Vn,64:60,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{14:[2,124]},{14:[2,125]},{11:[1,81]},{11:[1,82]},{36:[1,83]},{11:[1,84]},{11:[1,85]},{1:[2,1]},{5:[2,2]},{11:[1,86]},{2:$Vl,11:$Vm,12:87,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,21]),{13:[1,88]},{2:$Vl,11:$Vm,12:89,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($Vg,[2,43]),o($Vg,[2,44],{53:90,55:[1,91]}),{36:$Vx,52:93,56:$Va},{14:[1,94],15:[1,95]},o($Vy,$Vz,{31:[1,96],50:[1,97]}),o($Vy,[2,74]),{2:$Vl,11:$Vm,12:98,18:73,20:75,27:78,30:77,34:$Vn,64:99,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($VA,[2,54],{87:62,73:63,18:73,86:74,20:75,69:76,30:77,27:78,60:100,12:101,2:$Vl,11:$Vm,34:$Vn,70:$Vo,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,96:$Vw}),o($VB,[2,126]),o($VB,[2,127]),{41:[1,103],42:$VC},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:104,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},{31:[1,105],50:[1,106]},{14:[2,122],66:$VD,94:$VE,95:$VF},{14:[1,110]},{2:$Vl,11:$Vm,12:111,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($VG,[2,116],{88:[1,112],89:[1,113],90:[1,114],91:[1,115],92:[1,116],93:[1,117]}),o($VH,[2,112],{74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:124,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},o($VB,[2,91]),o($VB,[2,92]),o($VB,[2,93]),o($VB,[2,94]),o($VB,[2,95]),o($VB,[2,96]),o($VB,[2,97],{11:$Vh,40:[1,125],70:$Vi,102:$Vj,103:$Vk}),{2:$Vl,11:$Vm,12:126,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($VB,[2,99]),o($VB,[2,100]),o($VB,[2,101]),o($VB,[2,102]),o($VB,[2,103]),o($VB,[2,104]),o($VB,[2,105]),o($VO,[2,82],{87:62,73:63,18:73,86:74,20:75,69:76,30:77,27:78,71:127,12:128,2:$Vl,11:$Vm,34:$Vn,70:$Vo,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,96:$Vw}),{2:$Vl,11:$Vm,12:129,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{2:$Vl,11:$Vm,12:130,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{2:$V0,8:132,9:131,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{17:136,33:[1,134],34:[1,137],38:[1,135],43:133},{2:$Vl,11:$Vm,12:138,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($VA,[2,57],{58:139,61:140,34:$VP}),{13:[1,142],15:[1,143],94:$VE,95:$VF},{14:[1,144]},{14:[1,145],94:$VE,95:$VF},o($Vg,[2,45]),{36:$Vx,52:146,56:$Va},{2:$V0,8:132,9:147,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($VQ,[2,47]),o($VR,[2,69]),{34:[1,149],68:148},{2:$Vl,11:$Vm,12:151,18:73,20:75,27:78,30:77,34:$Vn,64:150,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{34:$VS,62:152,97:$VT,98:$VU,99:$VV},{14:$VW,66:$VD,94:$VE,95:$VF},{14:[1,158]},{13:[1,159],15:[1,160]},o($VA,[2,53],{94:$VE,95:$VF}),{11:[1,161]},{11:[1,162]},{72:[1,163],74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN},{2:$Vl,11:$Vm,12:164,18:73,20:75,27:78,30:77,34:$Vn,64:165,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{34:$VS,62:166,97:$VT,98:$VU,99:$VV},{2:$Vl,11:$Vm,12:167,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{2:$Vl,11:$Vm,12:168,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{2:$Vl,11:$Vm,12:169,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($Vg,[2,67]),o($VG,[2,115]),{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:170},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:171},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:172},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:173},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:174},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:175},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:176,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:177,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:178,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:179,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:180,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},{2:$Vl,11:$Vm,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:181,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74},o($VB,[2,90]),{42:$VC,104:[1,182]},{13:[1,183],94:$VE,95:$VF},{15:[1,185],72:[1,184]},o($VO,[2,81],{94:$VE,95:$VF}),{13:[1,186],94:$VE,95:$VF},{13:[1,187],94:$VE,95:$VF},{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,188],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($VX,[2,7]),{2:$Vl,11:$Vm,12:190,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{34:[1,191],67:49,68:51},{34:[1,192]},o($VY,[2,33]),{14:[1,193],31:[1,194]},{13:[1,195],94:$VE,95:$VF},{13:[1,196],15:[1,197]},o($VA,[2,56]),o($VA,$VZ,{59:198,50:$V_}),{14:[1,200]},{2:$Vl,11:$Vm,12:201,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($Vg,[2,23]),o($Vg,[2,24]),o($VQ,[2,46]),{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,202],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($Vy,[2,73]),o($Vy,$Vz,{31:$V$,50:$V01}),{14:[1,205]},o($Vy,$V11,{66:$VD,94:$VE,95:$VF}),o($Vy,$V21,{31:[1,206],70:$V31}),o($V41,[2,117]),o($V41,[2,118]),o($V41,[2,119]),o($V41,[2,121]),o($VR,[2,70]),o($Vg,[2,66]),o($VB,[2,51]),{2:$Vl,11:$Vm,12:208,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{13:[1,209]},{2:$Vl,11:$Vm,12:210,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o([13,14,15,31,50,66,72,74,75,76,77,78,79,88,89,90,91,92,93,94,95],[2,83]),{14:$V51,66:$VD,94:$VE,95:$VF},{14:[1,212]},{31:[1,213],70:$V31},o($VG,[2,113]),o([13,14,15,50,66,72,95],[2,114],{94:$VE}),{50:[1,214],94:$VE,95:$VF},o($VH,[2,106]),o($VH,[2,107]),o($VH,[2,108]),o($VH,[2,109]),o($VH,[2,110]),o($VH,[2,111]),o($V61,[2,84],{76:$VK,77:$VL,78:$VM,79:$VN}),o($V61,[2,85],{76:$VK,77:$VL,78:$VM,79:$VN}),o($V71,[2,86],{79:$VN}),o($V71,[2,87],{79:$VN}),o($V71,[2,88],{79:$VN}),o($VB,[2,89]),o($VB,[2,128]),o($VB,[2,98]),o($VB,[2,79]),{2:$Vl,11:$Vm,12:215,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{36:[1,216]},{36:[1,217]},{44:[1,218]},o($VX,[2,6]),{14:[1,219],94:$VE,95:$VF},o($Vy,$Vz,{31:$V$,35:[1,220],39:[1,221],50:$V01}),{31:[1,224],35:[1,222],39:[1,223],50:[1,225]},o($VY,[2,34]),{2:$Vl,11:$Vm,12:226,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{36:[1,227]},{36:$VZ,50:$V_,59:228},{34:$VP,61:229},o($VA,[2,58]),{34:$VS,62:230,63:[1,231],97:$VT,98:$VU,99:$VV},o($Vg,[2,8]),{13:[1,232],94:$VE,95:$VF},o($Vg,[2,48]),{34:$VS,62:233,97:$VT,98:$VU,99:$VV},{2:$Vl,11:$Vm,12:234,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($Vg,[2,62]),{2:$Vl,11:$Vm,12:236,18:73,20:75,27:78,30:77,34:$Vn,64:235,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{72:[1,237]},o($VA,[2,52],{94:$VE,95:$VF}),o($VB,[2,31]),{13:[1,238],94:$VE,95:$VF},o($VR,[2,71]),o($Vg,[2,64]),{2:$Vl,11:$Vm,12:239,18:73,20:75,27:78,30:77,34:$Vn,64:240,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{2:$Vl,11:$Vm,12:241,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($VO,[2,80],{94:$VE,95:$VF}),{47:242,48:243,49:$V81,51:$V91},{2:$V0,8:132,9:246,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{11:[1,247]},{20:248,34:[1,249]},{34:[1,250]},{34:[1,251]},{34:[1,252]},{34:[1,253]},{2:$Vl,11:$Vm,12:254,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{34:$VS,62:255,97:$VT,98:$VU,99:$VV},{14:$VW,94:$VE,95:$VF},{2:$V0,8:132,9:256,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{36:[1,257]},o($VA,[2,55]),o($Va1,[2,59],{70:$V31}),o($Va1,[2,60]),{14:[1,258]},o($Vy,$V21,{31:[1,259],70:$V31}),o($Vy,$V11,{94:$VE,95:$VF}),{14:[1,260]},o($Vy,$Vb1,{66:$VD,94:$VE,95:$VF}),o($V41,[2,120]),{14:[1,261]},{14:$Vc1,66:$VD,94:$VE,95:$VF},{14:[1,263]},{14:[2,68],94:$VE,95:$VF},{37:[1,264],48:265,49:$V81,51:$V91},o($Vd1,[2,39]),{2:$Vl,11:$Vm,12:266,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{50:[1,267]},{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,268],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$Vl,11:$Vm,12:269,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},{13:[1,270]},{102:$Vj,103:$Vk},{13:[1,271]},{13:[1,272]},{13:[1,273]},{13:[1,274]},{14:$V51,94:$VE,95:$VF},{31:[1,275],70:$V31},{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,276],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:132,9:277,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($Vg,[2,9]),{2:$Vl,11:$Vm,12:278,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($Vg,[2,63]),o($Vg,[2,30]),o($VR,[2,72]),o($Vg,[2,65]),o($Vg,[2,37]),o($Vd1,[2,38]),{50:[1,279],94:$VE,95:$VF},{2:$V0,8:132,9:280,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($Vg,[2,35]),{13:[1,281],94:$VE,95:$VF},{36:[1,282]},{36:[1,283]},{36:[1,284]},{36:[1,285]},{36:[1,286]},{2:$Vl,11:$Vm,12:287,18:73,20:75,27:78,30:77,34:$Vn,69:76,70:$Vo,73:63,75:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:74,87:62,96:$Vw},o($VQ,[2,49]),{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,288],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($Vy,$Vb1,{94:$VE,95:$VF}),{2:$V0,8:132,9:289,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($Vd1,[2,41],{16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,30:22,52:24,8:189,2:$V0,10:$V1,29:$V2,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,56:$Va,65:$Vc,100:$Vd,101:$Ve}),{14:[1,290]},{2:$V0,8:132,9:291,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:132,9:292,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:132,9:293,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:132,9:294,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:132,9:295,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{14:$Vc1,94:$VE,95:$VF},o($Vf,[2,50]),o($Vd1,[2,40],{16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,30:22,52:24,8:189,2:$V0,10:$V1,29:$V2,32:$V3,33:$V4,34:$V5,38:$V6,44:$V7,45:$V8,46:$V9,56:$Va,65:$Vc,100:$Vd,101:$Ve}),o($Vg,[2,36]),{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,296],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,297],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,298],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,299],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},{2:$V0,8:189,10:$V1,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:20,29:$V2,30:22,32:$V3,33:$V4,34:$V5,37:[1,300],38:$V6,44:$V7,45:$V8,46:$V9,52:24,56:$Va,65:$Vc,100:$Vd,101:$Ve},o($Vg,[2,32]),o($Vg,[2,26]),o($Vg,[2,28]),o($Vg,[2,27]),o($Vg,[2,29])],
defaultActions: {29:[2,124],30:[2,125],36:[2,1],37:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import { TE } from './tabla_errores';
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	const { SINTACTOCO, ERLEXICO } = require('./tabla_errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 96; 
break;
case 1: return 74; 
break;
case 2: return 75; 
break;
case 3: return 76; 
break;
case 4: return 77; 
break;
case 5: return 11; 
break;
case 6: return 13; 
break;
case 7: return 36; 
break;
case 8: return 37; 
break;
case 9: return 14; 
break;
case 10: return 88; 
break;
case 11: return 89; 
break;
case 12: return 90; 
break;
case 13: return 91; 
break;
case 14: return 31; 
break;
case 15: return 92; 
break;
case 16: return 93; 
break;
case 17: return 78; 
break;
case 18: return 79; 
break;
case 19: return 40; 
break;
case 20: return 50; 
break;
case 21: return 15; 
break;
case 22: return 94; 
break;
case 23: return 95; 
break;
case 24: return 102; 
break;
case 25: return 103; 
break;
case 26: return 66; 
break;
case 27: return 70; 
break;
case 28: return 72; 
break;
case 29: return 45; 
break;
case 30: return 97; 
break;
case 31: return 98; 
break;
case 32: return 99; 
break;
case 33: return 56; 
break;
case 34: return 55; 
break;
case 35: return 10; 
break;
case 36: return 33; 
break;
case 37: return 38; 
break;
case 38: return 57; 
break;
case 39: return 63; 
break;
case 40: return 65; 
break;
case 41: return 101; 
break;
case 42: return 100; 
break;
case 43: return 46; 
break;
case 44: return 49; 
break;
case 45: return 44; 
break;
case 46: return 32; 
break;
case 47: return 51; 
break;
case 48: return 104; 
break;
case 49: return 29; 
break;
case 50: return 42; 
break;
case 51: return 41; 
break;
case 52: return 35; 
break;
case 53: return 39; 
break;
case 54: return 85; 
break;
case 55: return 81; 
break;
case 56: return 80; 
break;
case 57: return 34; 
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 82; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 83; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 84; 
break;
case 61:/* skip whitespace */
break;
case 62:// comentario simple l√≠nea
break;
case 63:// comentario multiple l√≠neas
break;
case 64: 
break;
case 65: 
break;
case 66:return 5 //fin de cadena
break;
case 67: 	console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
				new ERLEXICO('Este es un error l√©xico', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
			
break;
case 68:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(!))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(;))/,/^(?:(>))/,/^(?:(<))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(=))/,/^(?:(==))/,/^(?:(!=))/,/^(?:(%))/,/^(?:(\*\*))/,/^(?:(\.))/,/^(?:(:))/,/^(?:(,))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(\+\+))/,/^(?:(--))/,/^(?:(\?))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(do))/,/^(?:(string))/,/^(?:(number))/,/^(?:(boolean))/,/^(?:(if))/,/^(?:(else))/,/^(?:(console\.log))/,/^(?:(let))/,/^(?:(const))/,/^(?:(function))/,/^(?:(void))/,/^(?:(return))/,/^(?:(continue))/,/^(?:(break))/,/^(?:(switch))/,/^(?:(case))/,/^(?:(while))/,/^(?:(for))/,/^(?:(default))/,/^(?:(length))/,/^(?:(graficar_ts))/,/^(?:(pop))/,/^(?:(push))/,/^(?:(of))/,/^(?:(in))/,/^(?:(true|false))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/,/^(?:("[^\"]*"))/,/^(?:('[^\']*'))/,/^(?:(`[^\`]*`))/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\\t)/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}